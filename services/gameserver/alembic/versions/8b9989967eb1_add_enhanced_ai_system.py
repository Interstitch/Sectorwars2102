"""add_enhanced_ai_system

Revision ID: 8b9989967eb1
Revises: o7p8q9r0s1t2
Create Date: 2025-06-08 00:05:50.269170

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '8b9989967eb1'
down_revision = 'o7p8q9r0s1t2'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('player_analytics_snapshots')
    op.drop_table('ai_comprehensive_assistants')
    op.drop_table('player_sessions')
    op.drop_table('player_activities')
    op.drop_table('ai_cross_system_knowledge')
    op.drop_column('ai_market_predictions', 'security_classification')
    op.drop_column('ai_market_predictions', 'cross_system_impact')
    op.drop_column('ai_market_predictions', 'data_retention_date')
    op.drop_constraint(op.f('clusters_region_id_fkey'), 'clusters', type_='foreignkey')
    op.create_foreign_key(None, 'clusters', 'galaxy_regions', ['region_id'], ['id'], ondelete='CASCADE')
    op.drop_column('player_trading_profiles', 'ai_trust_level')
    op.drop_column('player_trading_profiles', 'strategic_preferences')
    op.drop_column('player_trading_profiles', 'multi_system_performance')
    op.drop_column('player_trading_profiles', 'security_clearance')
    op.add_column('players', sa.Column('home_region_id', sa.UUID(), nullable=True))
    op.add_column('players', sa.Column('current_region_id', sa.UUID(), nullable=True))
    op.add_column('players', sa.Column('is_galactic_citizen', sa.Boolean(), nullable=False))
    op.create_foreign_key(None, 'players', 'regions', ['home_region_id'], ['id'])
    op.create_foreign_key(None, 'players', 'regions', ['current_region_id'], ['id'])
    op.add_column('regions', sa.Column('display_name', sa.String(length=255), nullable=False))
    op.add_column('regions', sa.Column('owner_id', sa.UUID(), nullable=True))
    op.add_column('regions', sa.Column('subscription_tier', sa.String(length=50), nullable=False))
    op.add_column('regions', sa.Column('paypal_subscription_id', sa.String(length=255), nullable=True))
    op.add_column('regions', sa.Column('subscription_status', sa.String(length=50), nullable=True))
    op.add_column('regions', sa.Column('subscription_started_at', sa.TIMESTAMP(), nullable=True))
    op.add_column('regions', sa.Column('subscription_expires_at', sa.TIMESTAMP(), nullable=True))
    op.add_column('regions', sa.Column('last_payment_at', sa.TIMESTAMP(), nullable=True))
    op.add_column('regions', sa.Column('next_billing_at', sa.TIMESTAMP(), nullable=True))
    op.add_column('regions', sa.Column('status', sa.String(length=50), nullable=False))
    op.add_column('regions', sa.Column('updated_at', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=False))
    op.add_column('regions', sa.Column('governance_type', sa.String(length=50), nullable=False))
    op.add_column('regions', sa.Column('voting_threshold', sa.DECIMAL(precision=3, scale=2), nullable=False))
    op.add_column('regions', sa.Column('election_frequency_days', sa.Integer(), nullable=False))
    op.add_column('regions', sa.Column('constitutional_text', sa.Text(), nullable=True))
    op.add_column('regions', sa.Column('tax_rate', sa.DECIMAL(precision=5, scale=4), nullable=False))
    op.add_column('regions', sa.Column('trade_bonuses', postgresql.JSONB(astext_type=sa.Text()), nullable=False))
    op.add_column('regions', sa.Column('economic_specialization', sa.String(length=50), nullable=True))
    op.add_column('regions', sa.Column('starting_credits', sa.Integer(), nullable=False))
    op.add_column('regions', sa.Column('starting_ship', sa.String(length=50), nullable=False))
    op.add_column('regions', sa.Column('language_pack', postgresql.JSONB(astext_type=sa.Text()), nullable=False))
    op.add_column('regions', sa.Column('aesthetic_theme', postgresql.JSONB(astext_type=sa.Text()), nullable=False))
    op.add_column('regions', sa.Column('traditions', postgresql.JSONB(astext_type=sa.Text()), nullable=False))
    op.add_column('regions', sa.Column('social_hierarchy', postgresql.JSONB(astext_type=sa.Text()), nullable=False))
    op.add_column('regions', sa.Column('nexus_warp_gate_sector', sa.Integer(), nullable=True))
    op.add_column('regions', sa.Column('active_players_30d', sa.Integer(), nullable=False))
    op.add_column('regions', sa.Column('total_trade_volume', sa.DECIMAL(precision=20, scale=2), nullable=False))
    op.alter_column('regions', 'name',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=255),
               existing_nullable=False)
    op.alter_column('regions', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.TIMESTAMP(),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.create_index(op.f('ix_regions_name'), 'regions', ['name'], unique=True)
    op.drop_constraint(op.f('regions_galaxy_id_fkey'), 'regions', type_='foreignkey')
    op.create_foreign_key(None, 'regions', 'users', ['owner_id'], ['id'])
    op.drop_column('regions', 'security_level')
    op.drop_column('regions', 'development')
    op.drop_column('regions', 'player_controlled_resources')
    op.drop_column('regions', 'faction_influence')
    op.drop_column('regions', 'security')
    op.drop_column('regions', 'galaxy_id')
    op.drop_column('regions', 'faction_control')
    op.drop_column('regions', 'border_sectors')
    op.drop_column('regions', 'special_features')
    op.drop_column('regions', 'last_updated')
    op.drop_column('regions', 'resources')
    op.drop_column('regions', 'controlling_faction')
    op.drop_column('regions', 'resource_richness')
    op.drop_column('regions', 'discovery_status')
    op.drop_column('regions', 'description')
    op.drop_column('regions', 'sector_count')
    op.drop_column('regions', 'discover_difficulty')
    op.drop_column('regions', 'type')
    op.drop_column('regions', 'player_controlled_sectors')
    op.add_column('sectors', sa.Column('sector_number', sa.Integer(), nullable=True))
    op.add_column('sectors', sa.Column('region_id', sa.UUID(), nullable=True))
    op.add_column('sectors', sa.Column('district', sa.String(length=50), nullable=True))
    op.add_column('sectors', sa.Column('security_level', sa.Integer(), nullable=True))
    op.add_column('sectors', sa.Column('development_level', sa.Integer(), nullable=True))
    op.add_column('sectors', sa.Column('traffic_level', sa.Integer(), nullable=True))
    op.create_foreign_key(None, 'sectors', 'regions', ['region_id'], ['id'])
    op.add_column('users', sa.Column('paypal_subscription_id', sa.String(length=255), nullable=True))
    op.add_column('users', sa.Column('subscription_tier', sa.String(length=50), nullable=True))
    op.add_column('users', sa.Column('subscription_status', sa.String(length=50), nullable=True))
    op.add_column('users', sa.Column('subscription_started_at', sa.TIMESTAMP(), nullable=True))
    op.add_column('users', sa.Column('subscription_expires_at', sa.TIMESTAMP(), nullable=True))
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('users', 'subscription_expires_at')
    op.drop_column('users', 'subscription_started_at')
    op.drop_column('users', 'subscription_status')
    op.drop_column('users', 'subscription_tier')
    op.drop_column('users', 'paypal_subscription_id')
    op.drop_constraint(None, 'sectors', type_='foreignkey')
    op.drop_column('sectors', 'traffic_level')
    op.drop_column('sectors', 'development_level')
    op.drop_column('sectors', 'security_level')
    op.drop_column('sectors', 'district')
    op.drop_column('sectors', 'region_id')
    op.drop_column('sectors', 'sector_number')
    op.add_column('regions', sa.Column('player_controlled_sectors', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('regions', sa.Column('type', postgresql.ENUM('FEDERATION', 'BORDER', 'FRONTIER', name='region_type'), autoincrement=False, nullable=False))
    op.add_column('regions', sa.Column('discover_difficulty', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('regions', sa.Column('sector_count', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('regions', sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('regions', sa.Column('discovery_status', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('regions', sa.Column('resource_richness', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False))
    op.add_column('regions', sa.Column('controlling_faction', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('regions', sa.Column('resources', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False))
    op.add_column('regions', sa.Column('last_updated', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False))
    op.add_column('regions', sa.Column('special_features', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=False))
    op.add_column('regions', sa.Column('border_sectors', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=False))
    op.add_column('regions', sa.Column('faction_control', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False))
    op.add_column('regions', sa.Column('galaxy_id', sa.UUID(), autoincrement=False, nullable=False))
    op.add_column('regions', sa.Column('security', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False))
    op.add_column('regions', sa.Column('faction_influence', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False))
    op.add_column('regions', sa.Column('player_controlled_resources', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('regions', sa.Column('development', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False))
    op.add_column('regions', sa.Column('security_level', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'regions', type_='foreignkey')
    op.create_foreign_key(op.f('regions_galaxy_id_fkey'), 'regions', 'galaxies', ['galaxy_id'], ['id'], ondelete='CASCADE')
    op.drop_index(op.f('ix_regions_name'), table_name='regions')
    op.alter_column('regions', 'created_at',
               existing_type=sa.TIMESTAMP(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('regions', 'name',
               existing_type=sa.String(length=255),
               type_=sa.VARCHAR(length=100),
               existing_nullable=False)
    op.drop_column('regions', 'total_trade_volume')
    op.drop_column('regions', 'active_players_30d')
    op.drop_column('regions', 'nexus_warp_gate_sector')
    op.drop_column('regions', 'social_hierarchy')
    op.drop_column('regions', 'traditions')
    op.drop_column('regions', 'aesthetic_theme')
    op.drop_column('regions', 'language_pack')
    op.drop_column('regions', 'starting_ship')
    op.drop_column('regions', 'starting_credits')
    op.drop_column('regions', 'economic_specialization')
    op.drop_column('regions', 'trade_bonuses')
    op.drop_column('regions', 'tax_rate')
    op.drop_column('regions', 'constitutional_text')
    op.drop_column('regions', 'election_frequency_days')
    op.drop_column('regions', 'voting_threshold')
    op.drop_column('regions', 'governance_type')
    op.drop_column('regions', 'updated_at')
    op.drop_column('regions', 'status')
    op.drop_column('regions', 'next_billing_at')
    op.drop_column('regions', 'last_payment_at')
    op.drop_column('regions', 'subscription_expires_at')
    op.drop_column('regions', 'subscription_started_at')
    op.drop_column('regions', 'subscription_status')
    op.drop_column('regions', 'paypal_subscription_id')
    op.drop_column('regions', 'subscription_tier')
    op.drop_column('regions', 'owner_id')
    op.drop_column('regions', 'display_name')
    op.drop_constraint(None, 'players', type_='foreignkey')
    op.drop_constraint(None, 'players', type_='foreignkey')
    op.drop_column('players', 'is_galactic_citizen')
    op.drop_column('players', 'current_region_id')
    op.drop_column('players', 'home_region_id')
    op.add_column('player_trading_profiles', sa.Column('security_clearance', sa.VARCHAR(length=20), server_default=sa.text("'standard'::character varying"), autoincrement=False, nullable=True))
    op.add_column('player_trading_profiles', sa.Column('multi_system_performance', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True))
    op.add_column('player_trading_profiles', sa.Column('strategic_preferences', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True))
    op.add_column('player_trading_profiles', sa.Column('ai_trust_level', sa.NUMERIC(precision=3, scale=2), server_default=sa.text('0.5'), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'clusters', type_='foreignkey')
    op.create_foreign_key(op.f('clusters_region_id_fkey'), 'clusters', 'regions', ['region_id'], ['id'], ondelete='CASCADE')
    op.add_column('ai_market_predictions', sa.Column('data_retention_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('ai_market_predictions', sa.Column('cross_system_impact', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True))
    op.add_column('ai_market_predictions', sa.Column('security_classification', sa.VARCHAR(length=20), server_default=sa.text("'internal'::character varying"), autoincrement=False, nullable=True))
    op.create_table('ai_cross_system_knowledge',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('assistant_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('knowledge_domain', sa.VARCHAR(length=30), autoincrement=False, nullable=False),
    sa.Column('knowledge_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('knowledge_subtype', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('security_classification', sa.VARCHAR(length=20), server_default=sa.text("'internal'::character varying"), autoincrement=False, nullable=False),
    sa.Column('data_sensitivity', sa.VARCHAR(length=20), server_default=sa.text("'low'::character varying"), autoincrement=False, nullable=False),
    sa.Column('knowledge_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('encrypted_knowledge', postgresql.BYTEA(), autoincrement=False, nullable=True),
    sa.Column('confidence_score', sa.NUMERIC(precision=4, scale=3), server_default=sa.text('0.500'), autoincrement=False, nullable=False),
    sa.Column('validation_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('accuracy_score', sa.NUMERIC(precision=4, scale=3), server_default=sa.text('NULL::numeric'), autoincrement=False, nullable=True),
    sa.Column('knowledge_timestamp', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('expiry_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('last_validated', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('data_source', sa.VARCHAR(length=50), server_default=sa.text("'player_action'::character varying"), autoincrement=False, nullable=False),
    sa.Column('source_metadata', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True),
    sa.CheckConstraint("data_sensitivity::text = ANY (ARRAY['low'::character varying, 'medium'::character varying, 'high'::character varying, 'critical'::character varying]::text[])", name=op.f('ai_cross_system_knowledge_data_sensitivity_check')),
    sa.CheckConstraint("jsonb_typeof(knowledge_data) = 'object'::text AND pg_column_size(knowledge_data) < 65536", name=op.f('valid_knowledge_data')),
    sa.CheckConstraint("jsonb_typeof(source_metadata) = 'object'::text AND pg_column_size(source_metadata) < 4096", name=op.f('valid_source_metadata')),
    sa.CheckConstraint("knowledge_domain::text = ANY (ARRAY['trading'::character varying, 'combat'::character varying, 'colony'::character varying, 'port'::character varying, 'strategic'::character varying, 'social'::character varying]::text[])", name=op.f('ai_cross_system_knowledge_knowledge_domain_check')),
    sa.CheckConstraint("security_classification::text = ANY (ARRAY['public'::character varying, 'internal'::character varying, 'restricted'::character varying, 'confidential'::character varying]::text[])", name=op.f('ai_cross_system_knowledge_security_classification_check')),
    sa.CheckConstraint('accuracy_score IS NULL OR accuracy_score >= 0.000 AND accuracy_score <= 1.000', name=op.f('ai_cross_system_knowledge_accuracy_score_check')),
    sa.CheckConstraint('confidence_score >= 0.000 AND confidence_score <= 1.000', name=op.f('ai_cross_system_knowledge_confidence_score_check')),
    sa.ForeignKeyConstraint(['assistant_id'], ['ai_comprehensive_assistants.id'], name=op.f('ai_cross_system_knowledge_assistant_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('ai_cross_system_knowledge_pkey'))
    )
    op.create_table('player_activities',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('player_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('session_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('timestamp', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('activity_type', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('sector_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('target_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('credits_involved', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('items_involved', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('risk_score', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('flagged_for_review', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('activity_metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['player_id'], ['players.id'], name=op.f('player_activities_player_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['session_id'], ['player_sessions.id'], name=op.f('player_activities_session_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('player_activities_pkey'))
    )
    op.create_table('player_sessions',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('player_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('start_time', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('end_time', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('duration_minutes', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('ip_address', sa.VARCHAR(length=45), autoincrement=False, nullable=True),
    sa.Column('user_agent', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('actions_performed', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('sectors_visited', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('credits_earned', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('credits_spent', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['player_id'], ['players.id'], name=op.f('player_sessions_player_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('player_sessions_pkey'))
    )
    op.create_table('ai_comprehensive_assistants',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('player_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('assistant_name', sa.VARCHAR(length=50), server_default=sa.text("'ARIA'::character varying"), autoincrement=False, nullable=False),
    sa.Column('personality_type', sa.VARCHAR(length=20), server_default=sa.text("'analytical'::character varying"), autoincrement=False, nullable=False),
    sa.Column('learning_mode', sa.VARCHAR(length=20), server_default=sa.text("'balanced'::character varying"), autoincrement=False, nullable=False),
    sa.Column('security_level', sa.VARCHAR(length=20), server_default=sa.text("'standard'::character varying"), autoincrement=False, nullable=False),
    sa.Column('encryption_key_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('access_permissions', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text('\'{"port": false, "colony": false, "combat": false, "trading": true}\'::jsonb'), autoincrement=False, nullable=False),
    sa.Column('api_request_quota', sa.INTEGER(), server_default=sa.text('1000'), autoincrement=False, nullable=False),
    sa.Column('api_requests_used', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('quota_reset_date', sa.DATE(), server_default=sa.text('CURRENT_DATE'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('last_active', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('total_interactions', sa.BIGINT(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('learning_sessions', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.CheckConstraint("jsonb_typeof(access_permissions) = 'object'::text AND access_permissions ? 'trading'::text", name=op.f('valid_access_permissions')),
    sa.CheckConstraint("learning_mode::text = ANY (ARRAY['conservative'::character varying, 'balanced'::character varying, 'aggressive'::character varying, 'custom'::character varying]::text[])", name=op.f('ai_comprehensive_assistants_learning_mode_check')),
    sa.CheckConstraint("personality_type::text = ANY (ARRAY['analytical'::character varying, 'friendly'::character varying, 'tactical'::character varying, 'cautious'::character varying, 'adaptive'::character varying]::text[])", name=op.f('ai_comprehensive_assistants_personality_type_check')),
    sa.CheckConstraint("security_level::text = ANY (ARRAY['basic'::character varying, 'standard'::character varying, 'premium'::character varying, 'enterprise'::character varying]::text[])", name=op.f('ai_comprehensive_assistants_security_level_check')),
    sa.CheckConstraint('api_request_quota >= 100 AND api_request_quota <= 10000 AND api_requests_used >= 0 AND api_requests_used <= api_request_quota', name=op.f('quota_bounds')),
    sa.CheckConstraint('learning_sessions >= 0', name=op.f('ai_comprehensive_assistants_learning_sessions_check')),
    sa.CheckConstraint('total_interactions >= 0', name=op.f('ai_comprehensive_assistants_total_interactions_check')),
    sa.ForeignKeyConstraint(['player_id'], ['players.id'], name=op.f('ai_comprehensive_assistants_player_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('ai_comprehensive_assistants_pkey')),
    sa.UniqueConstraint('player_id', name=op.f('ai_comprehensive_assistants_player_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('player_analytics_snapshots',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('snapshot_time', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('snapshot_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('total_players', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('active_players', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('online_players', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('new_players_today', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('new_players_week', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('total_credits_circulation', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('average_credits_per_player', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('total_ships', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('total_planets', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('total_ports', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('average_session_time', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('total_actions_today', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('player_retention_rate_7d', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('player_retention_rate_30d', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('suspicious_activity_alerts', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('failed_login_attempts', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('player_by_status', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('ships_by_type', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('planets_by_type', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('activity_by_hour', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('player_analytics_snapshots_pkey'))
    )
    # ### end Alembic commands ###