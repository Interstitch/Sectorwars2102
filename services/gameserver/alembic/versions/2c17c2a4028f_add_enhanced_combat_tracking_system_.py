"""add_enhanced_combat_tracking_system_fixed

Revision ID: 2c17c2a4028f
Revises: 4cbc7b9838e6
Create Date: 2025-05-23 23:56:13.427911

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '2c17c2a4028f'
down_revision = '4cbc7b9838e6'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('combat_stats',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('date', sa.DateTime(timezone=True), nullable=False),
    sa.Column('total_combats', sa.Integer(), nullable=False),
    sa.Column('ship_combats', sa.Integer(), nullable=False),
    sa.Column('port_attacks', sa.Integer(), nullable=False),
    sa.Column('planet_defenses', sa.Integer(), nullable=False),
    sa.Column('attacker_wins', sa.Integer(), nullable=False),
    sa.Column('defender_wins', sa.Integer(), nullable=False),
    sa.Column('draws', sa.Integer(), nullable=False),
    sa.Column('escapes', sa.Integer(), nullable=False),
    sa.Column('total_credits_looted', sa.Integer(), nullable=False),
    sa.Column('total_cargo_looted_value', sa.Integer(), nullable=False),
    sa.Column('average_loot_per_combat', sa.Float(), nullable=False),
    sa.Column('total_fighters_lost', sa.Integer(), nullable=False),
    sa.Column('average_combat_duration', sa.Float(), nullable=False),
    sa.Column('most_effective_ship_type', sa.String(length=50), nullable=True),
    sa.Column('most_active_attacker_id', sa.UUID(), nullable=True),
    sa.Column('most_active_defender_id', sa.UUID(), nullable=True),
    sa.Column('unique_combatants', sa.Integer(), nullable=False),
    sa.Column('calculated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['most_active_attacker_id'], ['players.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['most_active_defender_id'], ['players.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('date')
    )
    op.drop_table('drones')
    op.drop_table('drone_deployments')
    op.add_column('combat_logs', sa.Column('attacker_ship_name', sa.String(length=100), nullable=True))
    op.add_column('combat_logs', sa.Column('defender_ship_name', sa.String(length=100), nullable=True))
    op.add_column('combat_logs', sa.Column('attacker_ship_type', sa.String(length=50), nullable=True))
    op.add_column('combat_logs', sa.Column('defender_ship_type', sa.String(length=50), nullable=True))
    op.add_column('combat_logs', sa.Column('outcome', sa.String(length=20), nullable=False))
    op.add_column('combat_logs', sa.Column('attacker_fighters', sa.Integer(), nullable=False))
    op.add_column('combat_logs', sa.Column('defender_fighters', sa.Integer(), nullable=False))
    op.add_column('combat_logs', sa.Column('attacker_attack_drones', sa.Integer(), nullable=False))
    op.add_column('combat_logs', sa.Column('attacker_defense_drones', sa.Integer(), nullable=False))
    op.add_column('combat_logs', sa.Column('defender_attack_drones', sa.Integer(), nullable=False))
    op.add_column('combat_logs', sa.Column('defender_defense_drones', sa.Integer(), nullable=False))
    op.add_column('combat_logs', sa.Column('attacker_damage_dealt', sa.Integer(), nullable=False))
    op.add_column('combat_logs', sa.Column('defender_damage_dealt', sa.Integer(), nullable=False))
    op.add_column('combat_logs', sa.Column('attacker_fighters_lost', sa.Integer(), nullable=False))
    op.add_column('combat_logs', sa.Column('defender_fighters_lost', sa.Integer(), nullable=False))
    op.add_column('combat_logs', sa.Column('credits_looted', sa.Integer(), nullable=False))
    op.add_column('combat_logs', sa.Column('cargo_looted', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('combat_logs', sa.Column('experience_gained', sa.Integer(), nullable=False))
    op.add_column('combat_logs', sa.Column('combat_duration', sa.Float(), nullable=False))
    op.add_column('combat_logs', sa.Column('rounds', sa.Integer(), nullable=False))
    op.add_column('combat_logs', sa.Column('combat_log', sa.Text(), nullable=True))
    op.add_column('combat_logs', sa.Column('started_at', sa.DateTime(timezone=True), nullable=False))
    op.add_column('combat_logs', sa.Column('ended_at', sa.DateTime(timezone=True), nullable=True))
    op.add_column('combat_logs', sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.add_column('combat_logs', sa.Column('admin_notes', sa.Text(), nullable=True))
    op.add_column('combat_logs', sa.Column('admin_resolved', sa.Boolean(), nullable=False))
    op.add_column('combat_logs', sa.Column('admin_resolved_at', sa.DateTime(timezone=True), nullable=True))
    op.add_column('combat_logs', sa.Column('disputed', sa.Boolean(), nullable=False))
    op.add_column('combat_logs', sa.Column('resolved', sa.Boolean(), nullable=False))
    op.add_column('combat_logs', sa.Column('admin_reviewed', sa.Boolean(), nullable=False))
    op.alter_column('combat_logs', 'attacker_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.alter_column('combat_logs', 'sector_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('combat_logs', 'combat_type',
               existing_type=postgresql.ENUM('SHIP_VS_SHIP', 'SHIP_VS_PLANET', 'SHIP_VS_PORT', 'SHIP_VS_DRONES', 'PLANET_DEFENSE', 'PORT_DEFENSE', 'SECTOR_DEFENSE', name='combat_type'),
               type_=sa.String(length=50),
               existing_nullable=False)
    op.drop_constraint('combat_logs_defender_ship_id_fkey', 'combat_logs', type_='foreignkey')
    op.drop_constraint('combat_logs_attacker_ship_id_fkey', 'combat_logs', type_='foreignkey')
    op.drop_constraint('combat_logs_defender_team_id_fkey', 'combat_logs', type_='foreignkey')
    op.drop_constraint('combat_logs_attacker_team_id_fkey', 'combat_logs', type_='foreignkey')
    op.drop_constraint('combat_logs_attacker_id_fkey', 'combat_logs', type_='foreignkey')
    op.drop_constraint('combat_logs_planet_id_fkey', 'combat_logs', type_='foreignkey')
    op.drop_constraint('combat_logs_defender_id_fkey', 'combat_logs', type_='foreignkey')
    op.drop_constraint('combat_logs_port_id_fkey', 'combat_logs', type_='foreignkey')
    op.drop_constraint('combat_logs_sector_uuid_fkey', 'combat_logs', type_='foreignkey')
    op.create_foreign_key(None, 'combat_logs', 'players', ['defender_id'], ['id'], ondelete='SET NULL')
    op.create_foreign_key(None, 'combat_logs', 'players', ['attacker_id'], ['id'], ondelete='SET NULL')
    op.create_foreign_key(None, 'combat_logs', 'sectors', ['sector_uuid'], ['id'], ondelete='SET NULL')
    op.create_foreign_key(None, 'combat_logs', 'ships', ['attacker_ship_id'], ['id'], ondelete='SET NULL')
    op.create_foreign_key(None, 'combat_logs', 'ports', ['port_id'], ['id'], ondelete='SET NULL')
    op.create_foreign_key(None, 'combat_logs', 'planets', ['planet_id'], ['id'], ondelete='SET NULL')
    op.create_foreign_key(None, 'combat_logs', 'ships', ['defender_ship_id'], ['id'], ondelete='SET NULL')
    op.drop_column('combat_logs', 'attacker_drones_lost')
    op.drop_column('combat_logs', 'combat_details')
    op.drop_column('combat_logs', 'attacker_team_id')
    op.drop_column('combat_logs', 'defender_team_id')
    op.drop_column('combat_logs', 'attacker_ship_destroyed')
    op.drop_column('combat_logs', 'resources_captured')
    op.drop_column('combat_logs', 'combat_rounds')
    op.drop_column('combat_logs', 'turns_consumed')
    op.drop_column('combat_logs', 'defender_ship_destroyed')
    op.drop_column('combat_logs', 'combat_result')
    op.drop_column('combat_logs', 'credits_transferred')
    op.drop_column('combat_logs', 'reputation_changes')
    op.drop_column('combat_logs', 'defender_drones_lost')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('combat_logs', sa.Column('defender_drones_lost', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('combat_logs', sa.Column('reputation_changes', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False))
    op.add_column('combat_logs', sa.Column('credits_transferred', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('combat_logs', sa.Column('combat_result', postgresql.ENUM('ATTACKER_VICTORY', 'DEFENDER_VICTORY', 'DRAW', 'ATTACKER_FLED', 'DEFENDER_FLED', 'MUTUAL_DESTRUCTION', 'ABANDONED', name='combat_result'), autoincrement=False, nullable=False))
    op.add_column('combat_logs', sa.Column('defender_ship_destroyed', sa.BOOLEAN(), autoincrement=False, nullable=False))
    op.add_column('combat_logs', sa.Column('turns_consumed', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('combat_logs', sa.Column('combat_rounds', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('combat_logs', sa.Column('resources_captured', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False))
    op.add_column('combat_logs', sa.Column('attacker_ship_destroyed', sa.BOOLEAN(), autoincrement=False, nullable=False))
    op.add_column('combat_logs', sa.Column('defender_team_id', sa.UUID(), autoincrement=False, nullable=True))
    op.add_column('combat_logs', sa.Column('attacker_team_id', sa.UUID(), autoincrement=False, nullable=True))
    op.add_column('combat_logs', sa.Column('combat_details', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False))
    op.add_column('combat_logs', sa.Column('attacker_drones_lost', sa.INTEGER(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'combat_logs', type_='foreignkey')
    op.drop_constraint(None, 'combat_logs', type_='foreignkey')
    op.drop_constraint(None, 'combat_logs', type_='foreignkey')
    op.drop_constraint(None, 'combat_logs', type_='foreignkey')
    op.drop_constraint(None, 'combat_logs', type_='foreignkey')
    op.drop_constraint(None, 'combat_logs', type_='foreignkey')
    op.drop_constraint(None, 'combat_logs', type_='foreignkey')
    op.create_foreign_key('combat_logs_sector_uuid_fkey', 'combat_logs', 'sectors', ['sector_uuid'], ['id'])
    op.create_foreign_key('combat_logs_port_id_fkey', 'combat_logs', 'ports', ['port_id'], ['id'])
    op.create_foreign_key('combat_logs_defender_id_fkey', 'combat_logs', 'players', ['defender_id'], ['id'])
    op.create_foreign_key('combat_logs_planet_id_fkey', 'combat_logs', 'planets', ['planet_id'], ['id'])
    op.create_foreign_key('combat_logs_attacker_id_fkey', 'combat_logs', 'players', ['attacker_id'], ['id'])
    op.create_foreign_key('combat_logs_attacker_team_id_fkey', 'combat_logs', 'teams', ['attacker_team_id'], ['id'])
    op.create_foreign_key('combat_logs_defender_team_id_fkey', 'combat_logs', 'teams', ['defender_team_id'], ['id'])
    op.create_foreign_key('combat_logs_attacker_ship_id_fkey', 'combat_logs', 'ships', ['attacker_ship_id'], ['id'])
    op.create_foreign_key('combat_logs_defender_ship_id_fkey', 'combat_logs', 'ships', ['defender_ship_id'], ['id'])
    op.alter_column('combat_logs', 'combat_type',
               existing_type=sa.String(length=50),
               type_=postgresql.ENUM('SHIP_VS_SHIP', 'SHIP_VS_PLANET', 'SHIP_VS_PORT', 'SHIP_VS_DRONES', 'PLANET_DEFENSE', 'PORT_DEFENSE', 'SECTOR_DEFENSE', name='combat_type'),
               existing_nullable=False)
    op.alter_column('combat_logs', 'sector_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('combat_logs', 'attacker_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.drop_column('combat_logs', 'admin_reviewed')
    op.drop_column('combat_logs', 'resolved')
    op.drop_column('combat_logs', 'disputed')
    op.drop_column('combat_logs', 'admin_resolved_at')
    op.drop_column('combat_logs', 'admin_resolved')
    op.drop_column('combat_logs', 'admin_notes')
    op.drop_column('combat_logs', 'created_at')
    op.drop_column('combat_logs', 'ended_at')
    op.drop_column('combat_logs', 'started_at')
    op.drop_column('combat_logs', 'combat_log')
    op.drop_column('combat_logs', 'rounds')
    op.drop_column('combat_logs', 'combat_duration')
    op.drop_column('combat_logs', 'experience_gained')
    op.drop_column('combat_logs', 'cargo_looted')
    op.drop_column('combat_logs', 'credits_looted')
    op.drop_column('combat_logs', 'defender_fighters_lost')
    op.drop_column('combat_logs', 'attacker_fighters_lost')
    op.drop_column('combat_logs', 'defender_damage_dealt')
    op.drop_column('combat_logs', 'attacker_damage_dealt')
    op.drop_column('combat_logs', 'defender_defense_drones')
    op.drop_column('combat_logs', 'defender_attack_drones')
    op.drop_column('combat_logs', 'attacker_defense_drones')
    op.drop_column('combat_logs', 'attacker_attack_drones')
    op.drop_column('combat_logs', 'defender_fighters')
    op.drop_column('combat_logs', 'attacker_fighters')
    op.drop_column('combat_logs', 'outcome')
    op.drop_column('combat_logs', 'defender_ship_type')
    op.drop_column('combat_logs', 'attacker_ship_type')
    op.drop_column('combat_logs', 'defender_ship_name')
    op.drop_column('combat_logs', 'attacker_ship_name')
    op.create_table('drone_deployments',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('player_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('sector_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('deployment_time', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('drone_count', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('pattern', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('last_combat', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('drones_lost', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('enemies_destroyed', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('combat_effectiveness', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('special_abilities', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['player_id'], ['players.id'], name='drone_deployments_player_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='drone_deployments_pkey')
    )
    op.create_table('drones',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('owner_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('ship_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('planet_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('port_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('sector_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('attack_power', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('defense_power', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('health', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('fuel_efficiency', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('is_damaged', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('damage_level', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('is_deployed', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('deployment_mode', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['owner_id'], ['players.id'], name='drones_owner_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['planet_id'], ['planets.id'], name='drones_planet_id_fkey'),
    sa.ForeignKeyConstraint(['port_id'], ['ports.id'], name='drones_port_id_fkey'),
    sa.ForeignKeyConstraint(['ship_id'], ['ships.id'], name='drones_ship_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='drones_pkey')
    )
    op.drop_table('combat_stats')
    # ### end Alembic commands ###