"""add_ship_status_column

Revision ID: 4fc08fd7a388
Revises: 9436fb39bd26
Create Date: 2025-05-31 02:22:29.248618

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '4fc08fd7a388'
down_revision = '9436fb39bd26'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('player_activities')
    op.drop_table('player_sessions')
    op.drop_table('player_analytics_snapshots')
    op.drop_index(op.f('ix_audit_logs_user_timestamp'), table_name='audit_logs')
    op.alter_column('planets', 'fuel_ore',
               existing_type=sa.INTEGER(),
               nullable=False,
               existing_server_default=sa.text('0'))
    op.alter_column('planets', 'organics',
               existing_type=sa.INTEGER(),
               nullable=False,
               existing_server_default=sa.text('0'))
    op.alter_column('planets', 'equipment',
               existing_type=sa.INTEGER(),
               nullable=False,
               existing_server_default=sa.text('0'))
    op.alter_column('planets', 'fighters',
               existing_type=sa.INTEGER(),
               nullable=False,
               existing_server_default=sa.text('0'))
    op.alter_column('planets', 'colonists',
               existing_type=sa.INTEGER(),
               nullable=False,
               existing_server_default=sa.text('0'))
    op.alter_column('planets', 'max_colonists',
               existing_type=sa.INTEGER(),
               nullable=False,
               existing_server_default=sa.text('10000'))
    op.alter_column('planets', 'fuel_allocation',
               existing_type=sa.INTEGER(),
               nullable=False,
               existing_server_default=sa.text('0'))
    op.alter_column('planets', 'organics_allocation',
               existing_type=sa.INTEGER(),
               nullable=False,
               existing_server_default=sa.text('0'))
    op.alter_column('planets', 'equipment_allocation',
               existing_type=sa.INTEGER(),
               nullable=False,
               existing_server_default=sa.text('0'))
    op.alter_column('planets', 'factory_level',
               existing_type=sa.INTEGER(),
               nullable=False,
               existing_server_default=sa.text('0'))
    op.alter_column('planets', 'farm_level',
               existing_type=sa.INTEGER(),
               nullable=False,
               existing_server_default=sa.text('0'))
    op.alter_column('planets', 'mine_level',
               existing_type=sa.INTEGER(),
               nullable=False,
               existing_server_default=sa.text('0'))
    op.alter_column('planets', 'research_level',
               existing_type=sa.INTEGER(),
               nullable=False,
               existing_server_default=sa.text('0'))
    op.alter_column('planets', 'defense_turrets',
               existing_type=sa.INTEGER(),
               nullable=False,
               existing_server_default=sa.text('0'))
    op.alter_column('planets', 'defense_shields',
               existing_type=sa.INTEGER(),
               nullable=False,
               existing_server_default=sa.text('0'))
    op.alter_column('planets', 'defense_fighters',
               existing_type=sa.INTEGER(),
               nullable=False,
               existing_server_default=sa.text('0'))
    op.alter_column('planets', 'under_siege',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('false'))
    op.drop_constraint(op.f('uq_player_faction_reputation'), 'reputations', type_='unique')
    # Create the enum type first
    ship_status = sa.Enum('DOCKED', 'IN_SPACE', 'IN_COMBAT', 'DESTROYED', 'MAINTENANCE', name='ship_status')
    ship_status.create(op.get_bind(), checkfirst=True)
    
    # Add the column as nullable first
    op.add_column('ships', sa.Column('status', ship_status, nullable=True))
    
    # Update existing ships to have a default status
    op.execute("UPDATE ships SET status = 'DOCKED' WHERE status IS NULL")
    
    # Now make the column non-nullable
    op.alter_column('ships', 'status', nullable=False)
    
    # Add team columns with proper defaults
    op.add_column('teams', sa.Column('recruitment_status', sa.String(length=20), nullable=False, default='OPEN'))
    op.add_column('teams', sa.Column('treasury_credits', sa.Integer(), nullable=False, default=0))
    op.add_column('teams', sa.Column('treasury_fuel', sa.Integer(), nullable=False, default=0))
    op.add_column('teams', sa.Column('treasury_organics', sa.Integer(), nullable=False, default=0))
    op.add_column('teams', sa.Column('treasury_equipment', sa.Integer(), nullable=False, default=0))
    op.add_column('teams', sa.Column('treasury_technology', sa.Integer(), nullable=False, default=0))
    op.add_column('teams', sa.Column('treasury_luxury_items', sa.Integer(), nullable=False, default=0))
    op.add_column('teams', sa.Column('treasury_precious_metals', sa.Integer(), nullable=False, default=0))
    op.add_column('teams', sa.Column('treasury_raw_materials', sa.Integer(), nullable=False, default=0))
    op.add_column('teams', sa.Column('treasury_plasma', sa.Integer(), nullable=False, default=0))
    op.add_column('teams', sa.Column('treasury_bio_samples', sa.Integer(), nullable=False, default=0))
    op.add_column('teams', sa.Column('treasury_dark_matter', sa.Integer(), nullable=False, default=0))
    op.add_column('teams', sa.Column('treasury_quantum_crystals', sa.Integer(), nullable=False, default=0))
    op.add_column('teams', sa.Column('invitation_codes', postgresql.JSONB(astext_type=sa.Text()), nullable=False, default='[]'))
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('teams', 'invitation_codes')
    op.drop_column('teams', 'treasury_quantum_crystals')
    op.drop_column('teams', 'treasury_dark_matter')
    op.drop_column('teams', 'treasury_bio_samples')
    op.drop_column('teams', 'treasury_plasma')
    op.drop_column('teams', 'treasury_raw_materials')
    op.drop_column('teams', 'treasury_precious_metals')
    op.drop_column('teams', 'treasury_luxury_items')
    op.drop_column('teams', 'treasury_technology')
    op.drop_column('teams', 'treasury_equipment')
    op.drop_column('teams', 'treasury_organics')
    op.drop_column('teams', 'treasury_fuel')
    op.drop_column('teams', 'treasury_credits')
    op.drop_column('teams', 'recruitment_status')
    op.drop_column('ships', 'status')
    op.create_unique_constraint(op.f('uq_player_faction_reputation'), 'reputations', ['player_id', 'faction_id'], postgresql_nulls_not_distinct=False)
    op.alter_column('planets', 'under_siege',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('false'))
    op.alter_column('planets', 'defense_fighters',
               existing_type=sa.INTEGER(),
               nullable=True,
               existing_server_default=sa.text('0'))
    op.alter_column('planets', 'defense_shields',
               existing_type=sa.INTEGER(),
               nullable=True,
               existing_server_default=sa.text('0'))
    op.alter_column('planets', 'defense_turrets',
               existing_type=sa.INTEGER(),
               nullable=True,
               existing_server_default=sa.text('0'))
    op.alter_column('planets', 'research_level',
               existing_type=sa.INTEGER(),
               nullable=True,
               existing_server_default=sa.text('0'))
    op.alter_column('planets', 'mine_level',
               existing_type=sa.INTEGER(),
               nullable=True,
               existing_server_default=sa.text('0'))
    op.alter_column('planets', 'farm_level',
               existing_type=sa.INTEGER(),
               nullable=True,
               existing_server_default=sa.text('0'))
    op.alter_column('planets', 'factory_level',
               existing_type=sa.INTEGER(),
               nullable=True,
               existing_server_default=sa.text('0'))
    op.alter_column('planets', 'equipment_allocation',
               existing_type=sa.INTEGER(),
               nullable=True,
               existing_server_default=sa.text('0'))
    op.alter_column('planets', 'organics_allocation',
               existing_type=sa.INTEGER(),
               nullable=True,
               existing_server_default=sa.text('0'))
    op.alter_column('planets', 'fuel_allocation',
               existing_type=sa.INTEGER(),
               nullable=True,
               existing_server_default=sa.text('0'))
    op.alter_column('planets', 'max_colonists',
               existing_type=sa.INTEGER(),
               nullable=True,
               existing_server_default=sa.text('10000'))
    op.alter_column('planets', 'colonists',
               existing_type=sa.INTEGER(),
               nullable=True,
               existing_server_default=sa.text('0'))
    op.alter_column('planets', 'fighters',
               existing_type=sa.INTEGER(),
               nullable=True,
               existing_server_default=sa.text('0'))
    op.alter_column('planets', 'equipment',
               existing_type=sa.INTEGER(),
               nullable=True,
               existing_server_default=sa.text('0'))
    op.alter_column('planets', 'organics',
               existing_type=sa.INTEGER(),
               nullable=True,
               existing_server_default=sa.text('0'))
    op.alter_column('planets', 'fuel_ore',
               existing_type=sa.INTEGER(),
               nullable=True,
               existing_server_default=sa.text('0'))
    op.create_index(op.f('ix_audit_logs_user_timestamp'), 'audit_logs', ['user_id', 'timestamp'], unique=False)
    op.create_table('player_analytics_snapshots',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('snapshot_time', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('snapshot_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('total_players', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('active_players', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('online_players', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('new_players_today', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('new_players_week', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('total_credits_circulation', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('average_credits_per_player', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('total_ships', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('total_planets', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('total_ports', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('average_session_time', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('total_actions_today', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('player_retention_rate_7d', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('player_retention_rate_30d', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('suspicious_activity_alerts', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('failed_login_attempts', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('player_by_status', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('ships_by_type', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('planets_by_type', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('activity_by_hour', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('player_analytics_snapshots_pkey'))
    )
    op.create_table('player_sessions',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('player_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('start_time', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('end_time', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('duration_minutes', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('ip_address', sa.VARCHAR(length=45), autoincrement=False, nullable=True),
    sa.Column('user_agent', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('actions_performed', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('sectors_visited', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('credits_earned', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('credits_spent', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['player_id'], ['players.id'], name='player_sessions_player_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='player_sessions_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('player_activities',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('player_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('session_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('timestamp', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('activity_type', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('sector_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('target_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('credits_involved', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('items_involved', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('risk_score', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('flagged_for_review', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('activity_metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['player_id'], ['players.id'], name=op.f('player_activities_player_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['session_id'], ['player_sessions.id'], name=op.f('player_activities_session_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('player_activities_pkey'))
    )
    # ### end Alembic commands ###