"""Add galaxy, region, cluster, and sector models

Revision ID: cd03f6dd4946
Revises: b42e19a78c52
Create Date: 2025-05-22 02:19:44.713135

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'cd03f6dd4946'
down_revision = 'b42e19a78c52'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('galaxies',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('last_updated', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('region_distribution', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('statistics', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('density', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('faction_influence', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('state', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('events', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('expansion_enabled', sa.Boolean(), nullable=False),
    sa.Column('max_sectors', sa.Integer(), nullable=False),
    sa.Column('resources_regenerate', sa.Boolean(), nullable=False),
    sa.Column('warp_shifts_enabled', sa.Boolean(), nullable=False),
    sa.Column('default_turns_per_day', sa.Integer(), nullable=False),
    sa.Column('combat_penalties', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('economic_modifiers', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('hidden_sectors', sa.Integer(), nullable=False),
    sa.Column('special_features', postgresql.ARRAY(sa.String()), nullable=False),
    sa.Column('description', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('genesis_devices',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('last_updated', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('serial_number', sa.String(length=50), nullable=False),
    sa.Column('type', sa.Enum('STANDARD', 'ENHANCED', 'SPECIALIZED', 'ADVANCED', 'EXPERIMENTAL', 'QUANTUM', name='genesis_type'), nullable=False),
    sa.Column('status', sa.Enum('INACTIVE', 'DEPLOYING', 'ACTIVE', 'COMPLETED', 'FAILED', 'UNSTABLE', 'ABORTED', name='genesis_status'), nullable=False),
    sa.Column('owner_id', sa.UUID(), nullable=False),
    sa.Column('creator_faction', sa.String(), nullable=True),
    sa.Column('ship_id', sa.UUID(), nullable=True),
    sa.Column('sector_id', sa.Integer(), nullable=True),
    sa.Column('planet_id', sa.UUID(), nullable=True),
    sa.Column('deployed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('terraforming_power', sa.Integer(), nullable=False),
    sa.Column('terraforming_types', postgresql.ARRAY(sa.String()), nullable=False),
    sa.Column('resource_generation', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('special_features', postgresql.ARRAY(sa.String()), nullable=False),
    sa.Column('phase', sa.Integer(), nullable=False),
    sa.Column('total_phases', sa.Integer(), nullable=False),
    sa.Column('progress', sa.Float(), nullable=False),
    sa.Column('estimated_completion', sa.DateTime(timezone=True), nullable=True),
    sa.Column('resource_consumption', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('stability', sa.Float(), nullable=False),
    sa.Column('failure_chance', sa.Float(), nullable=False),
    sa.Column('security_level', sa.Integer(), nullable=False),
    sa.Column('access_code', sa.String(), nullable=True),
    sa.Column('result_planet_type', sa.String(), nullable=True),
    sa.Column('result_planet_quality', sa.Float(), nullable=True),
    sa.Column('result_resources', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('result_special_features', postgresql.ARRAY(sa.String()), nullable=True),
    sa.ForeignKeyConstraint(['owner_id'], ['players.id'], ),
    sa.ForeignKeyConstraint(['planet_id'], ['planets.id'], ),
    sa.ForeignKeyConstraint(['ship_id'], ['ships.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('serial_number')
    )
    op.create_table('resources',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('last_updated', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('type', sa.Enum('FUEL', 'ORGANICS', 'EQUIPMENT', 'POPULATION', 'ORE', 'MINERALS', 'LUXURY_GOODS', 'TECHNOLOGY', 'MEDICAL_SUPPLIES', 'INDUSTRIAL_MATERIALS', 'QUANTUM_COMPONENTS', 'EXOTIC_MATTER', name='resource_type'), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('base_value', sa.Integer(), nullable=False),
    sa.Column('quality', sa.Enum('LOW', 'STANDARD', 'HIGH', 'PREMIUM', 'EXOTIC', name='resource_quality'), nullable=False),
    sa.Column('value_multiplier', sa.Float(), nullable=False),
    sa.Column('weight', sa.Float(), nullable=False),
    sa.Column('trade_volume', sa.Integer(), nullable=False),
    sa.Column('price_volatility', sa.Float(), nullable=False),
    sa.Column('base_production_rate', sa.Float(), nullable=False),
    sa.Column('production_difficulty', sa.Integer(), nullable=False),
    sa.Column('special_attributes', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('required_technology', sa.String(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('drone_deployments',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('player_id', sa.UUID(), nullable=False),
    sa.Column('sector_id', sa.Integer(), nullable=False),
    sa.Column('deployment_time', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('drone_count', sa.Integer(), nullable=False),
    sa.Column('pattern', sa.String(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('last_combat', sa.DateTime(timezone=True), nullable=True),
    sa.Column('drones_lost', sa.Integer(), nullable=False),
    sa.Column('enemies_destroyed', sa.Integer(), nullable=False),
    sa.Column('combat_effectiveness', sa.Float(), nullable=False),
    sa.Column('special_abilities', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.ForeignKeyConstraint(['player_id'], ['players.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('planet_formations',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('genesis_device_id', sa.UUID(), nullable=False),
    sa.Column('sector_id', sa.Integer(), nullable=False),
    sa.Column('original_conditions', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('started_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('estimated_duration', sa.Integer(), nullable=False),
    sa.Column('current_phase', sa.Integer(), nullable=False),
    sa.Column('total_phases', sa.Integer(), nullable=False),
    sa.Column('is_completed', sa.Boolean(), nullable=False),
    sa.Column('is_failed', sa.Boolean(), nullable=False),
    sa.Column('failure_reason', sa.String(), nullable=True),
    sa.Column('resulting_planet_id', sa.UUID(), nullable=True),
    sa.Column('formation_log', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('anomalies', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.ForeignKeyConstraint(['genesis_device_id'], ['genesis_devices.id'], ),
    sa.ForeignKeyConstraint(['resulting_planet_id'], ['planets.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('regions',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('last_updated', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('galaxy_id', sa.UUID(), nullable=False),
    sa.Column('type', sa.Enum('FEDERATION', 'BORDER', 'FRONTIER', name='region_type'), nullable=False),
    sa.Column('sector_count', sa.Integer(), nullable=False),
    sa.Column('discover_difficulty', sa.Integer(), nullable=False),
    sa.Column('security', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('faction_control', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('resources', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('development', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('security_level', sa.Float(), nullable=False),
    sa.Column('resource_richness', sa.Float(), nullable=False),
    sa.Column('controlling_faction', sa.String(), nullable=True),
    sa.Column('faction_influence', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('total_sectors', sa.Integer(), nullable=False),
    sa.Column('border_sectors', postgresql.ARRAY(sa.String()), nullable=False),
    sa.Column('player_controlled_sectors', sa.Integer(), nullable=False),
    sa.Column('player_controlled_resources', sa.Integer(), nullable=False),
    sa.Column('discovery_status', sa.Integer(), nullable=False),
    sa.Column('special_features', postgresql.ARRAY(sa.String()), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['galaxy_id'], ['galaxies.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('clusters',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('last_updated', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('region_id', sa.UUID(), nullable=False),
    sa.Column('type', sa.Enum('STANDARD', 'RESOURCE_RICH', 'POPULATION_CENTER', 'TRADE_HUB', 'MILITARY_ZONE', 'FRONTIER_OUTPOST', 'CONTESTED', 'SPECIAL_INTEREST', name='cluster_type'), nullable=False),
    sa.Column('sector_count', sa.Integer(), nullable=False),
    sa.Column('is_discovered', sa.Boolean(), nullable=False),
    sa.Column('discovery_requirement', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('stats', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('resource_modifiers', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('economic_focus', postgresql.ARRAY(sa.String()), nullable=False),
    sa.Column('resources', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('economic_value', sa.Integer(), nullable=False),
    sa.Column('controlling_faction', sa.String(), nullable=True),
    sa.Column('faction_influence', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('nav_hazards', postgresql.ARRAY(sa.String()), nullable=False),
    sa.Column('recommended_ship_class', sa.String(), nullable=False),
    sa.Column('x_coord', sa.Integer(), nullable=False),
    sa.Column('y_coord', sa.Integer(), nullable=False),
    sa.Column('z_coord', sa.Integer(), nullable=False),
    sa.Column('special_features', postgresql.ARRAY(sa.String()), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('is_hidden', sa.Boolean(), nullable=False),
    sa.Column('warp_stability', sa.Float(), nullable=False),
    sa.ForeignKeyConstraint(['region_id'], ['regions.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('sectors',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('sector_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('last_updated', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('cluster_id', sa.UUID(), nullable=False),
    sa.Column('type', sa.Enum('STANDARD', 'NEBULA', 'ASTEROID_FIELD', 'BLACK_HOLE', 'STAR_CLUSTER', 'VOID', 'INDUSTRIAL', 'AGRICULTURAL', 'FORBIDDEN', 'WORMHOLE', name='sector_type'), nullable=False),
    sa.Column('is_discovered', sa.Boolean(), nullable=False),
    sa.Column('discovered_by_id', sa.UUID(), nullable=True),
    sa.Column('discovery_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('x_coord', sa.Integer(), nullable=False),
    sa.Column('y_coord', sa.Integer(), nullable=False),
    sa.Column('z_coord', sa.Integer(), nullable=False),
    sa.Column('radiation_level', sa.Float(), nullable=False),
    sa.Column('hazard_level', sa.Integer(), nullable=False),
    sa.Column('resources', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('resource_regeneration', sa.Float(), nullable=False),
    sa.Column('players_present', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('ships_present', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('defenses', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('controlling_faction', sa.String(), nullable=True),
    sa.Column('controlling_team_id', sa.UUID(), nullable=True),
    sa.Column('last_combat', sa.DateTime(timezone=True), nullable=True),
    sa.Column('active_events', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('special_features', postgresql.ARRAY(sa.String()), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('nav_hazards', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('nav_beacons', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.ForeignKeyConstraint(['cluster_id'], ['clusters.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['controlling_team_id'], ['teams.id'], ),
    sa.ForeignKeyConstraint(['discovered_by_id'], ['players.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('sector_id')
    )
    op.create_table('sector_warps',
    sa.Column('source_sector_id', sa.UUID(), nullable=False),
    sa.Column('destination_sector_id', sa.UUID(), nullable=False),
    sa.Column('is_bidirectional', sa.Boolean(), nullable=False),
    sa.Column('turn_cost', sa.Integer(), nullable=False),
    sa.Column('warp_stability', sa.Float(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['destination_sector_id'], ['sectors.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['source_sector_id'], ['sectors.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('source_sector_id', 'destination_sector_id')
    )
    op.create_table('warp_tunnels',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('last_updated', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('origin_sector_id', sa.UUID(), nullable=False),
    sa.Column('destination_sector_id', sa.UUID(), nullable=False),
    sa.Column('type', sa.Enum('NATURAL', 'ARTIFICIAL', name='warp_tunnel_type'), nullable=False),
    sa.Column('status', sa.Enum('ACTIVE', 'UNSTABLE', 'DEGRADING', 'COLLAPSED', 'MAINTENANCE', 'FORMING', name='warp_tunnel_status'), nullable=False),
    sa.Column('is_bidirectional', sa.Boolean(), nullable=False),
    sa.Column('stability', sa.Float(), nullable=False),
    sa.Column('stability_enum', sa.Enum('UNSTABLE', 'STABLE', name='warp_tunnel_stability_enum'), nullable=False),
    sa.Column('properties', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('tunnel_status', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('source_endpoint', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('destination_endpoint', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('artificial_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('total_traversals', sa.Integer(), nullable=False),
    sa.Column('traversal_history', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('turn_cost', sa.Integer(), nullable=False),
    sa.Column('energy_cost', sa.Integer(), nullable=False),
    sa.Column('is_public', sa.Boolean(), nullable=False),
    sa.Column('access_requirements', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_by_player_id', sa.UUID(), nullable=True),
    sa.Column('created_by_faction', sa.String(), nullable=True),
    sa.Column('max_uses', sa.Integer(), nullable=True),
    sa.Column('current_uses', sa.Integer(), nullable=False),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('special_effects', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['created_by_player_id'], ['players.id'], ),
    sa.ForeignKeyConstraint(['destination_sector_id'], ['sectors.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['origin_sector_id'], ['sectors.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('combat_logs',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('timestamp', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('combat_type', sa.Enum('SHIP_VS_SHIP', 'SHIP_VS_PLANET', 'SHIP_VS_PORT', 'SHIP_VS_DRONES', 'PLANET_DEFENSE', 'PORT_DEFENSE', 'SECTOR_DEFENSE', name='combat_type'), nullable=False),
    sa.Column('combat_result', sa.Enum('ATTACKER_VICTORY', 'DEFENDER_VICTORY', 'DRAW', 'ATTACKER_FLED', 'DEFENDER_FLED', 'MUTUAL_DESTRUCTION', 'ABANDONED', name='combat_result'), nullable=False),
    sa.Column('sector_id', sa.Integer(), nullable=False),
    sa.Column('sector_uuid', sa.UUID(), nullable=True),
    sa.Column('attacker_id', sa.UUID(), nullable=False),
    sa.Column('attacker_ship_id', sa.UUID(), nullable=True),
    sa.Column('defender_id', sa.UUID(), nullable=True),
    sa.Column('defender_ship_id', sa.UUID(), nullable=True),
    sa.Column('planet_id', sa.UUID(), nullable=True),
    sa.Column('port_id', sa.UUID(), nullable=True),
    sa.Column('attacker_team_id', sa.UUID(), nullable=True),
    sa.Column('defender_team_id', sa.UUID(), nullable=True),
    sa.Column('turns_consumed', sa.Integer(), nullable=False),
    sa.Column('combat_rounds', sa.Integer(), nullable=False),
    sa.Column('attacker_drones_lost', sa.Integer(), nullable=False),
    sa.Column('defender_drones_lost', sa.Integer(), nullable=False),
    sa.Column('attacker_ship_destroyed', sa.Boolean(), nullable=False),
    sa.Column('defender_ship_destroyed', sa.Boolean(), nullable=False),
    sa.Column('credits_transferred', sa.Integer(), nullable=False),
    sa.Column('resources_captured', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('reputation_changes', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('combat_details', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.ForeignKeyConstraint(['attacker_id'], ['players.id'], ),
    sa.ForeignKeyConstraint(['attacker_ship_id'], ['ships.id'], ),
    sa.ForeignKeyConstraint(['attacker_team_id'], ['teams.id'], ),
    sa.ForeignKeyConstraint(['defender_id'], ['players.id'], ),
    sa.ForeignKeyConstraint(['defender_ship_id'], ['ships.id'], ),
    sa.ForeignKeyConstraint(['defender_team_id'], ['teams.id'], ),
    sa.ForeignKeyConstraint(['planet_id'], ['planets.id'], ),
    sa.ForeignKeyConstraint(['port_id'], ['ports.id'], ),
    sa.ForeignKeyConstraint(['sector_uuid'], ['sectors.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('drones',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('owner_id', sa.UUID(), nullable=False),
    sa.Column('ship_id', sa.UUID(), nullable=True),
    sa.Column('planet_id', sa.UUID(), nullable=True),
    sa.Column('port_id', sa.UUID(), nullable=True),
    sa.Column('sector_id', sa.Integer(), nullable=True),
    sa.Column('attack_power', sa.Integer(), nullable=False),
    sa.Column('defense_power', sa.Integer(), nullable=False),
    sa.Column('health', sa.Integer(), nullable=False),
    sa.Column('fuel_efficiency', sa.Float(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_damaged', sa.Boolean(), nullable=False),
    sa.Column('damage_level', sa.Integer(), nullable=False),
    sa.Column('is_deployed', sa.Boolean(), nullable=False),
    sa.Column('deployment_mode', sa.String(), nullable=False),
    sa.ForeignKeyConstraint(['owner_id'], ['players.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['planet_id'], ['planets.id'], ),
    sa.ForeignKeyConstraint(['port_id'], ['ports.id'], ),
    sa.ForeignKeyConstraint(['ship_id'], ['ships.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('markets',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('last_updated', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('port_id', sa.UUID(), nullable=False),
    sa.Column('specialization', sa.String(), nullable=True),
    sa.Column('size', sa.Integer(), nullable=False),
    sa.Column('tax_rate', sa.Float(), nullable=False),
    sa.Column('economic_status', sa.String(), nullable=False),
    sa.Column('resource_availability', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('resource_prices', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('price_modifiers', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('daily_volume', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('price_history', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('black_market', sa.Boolean(), nullable=False),
    sa.Column('special_offers', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('trade_restrictions', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.ForeignKeyConstraint(['port_id'], ['ports.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('market_transactions',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('timestamp', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('market_id', sa.UUID(), nullable=False),
    sa.Column('player_id', sa.UUID(), nullable=False),
    sa.Column('ship_id', sa.UUID(), nullable=True),
    sa.Column('is_purchase', sa.Boolean(), nullable=False),
    sa.Column('resource_type', sa.Enum('FUEL', 'ORGANICS', 'EQUIPMENT', 'POPULATION', 'ORE', 'MINERALS', 'LUXURY_GOODS', 'TECHNOLOGY', 'MEDICAL_SUPPLIES', 'INDUSTRIAL_MATERIALS', 'QUANTUM_COMPONENTS', 'EXOTIC_MATTER', name='resource_type'), nullable=False),
    sa.Column('resource_quality', sa.Enum('LOW', 'STANDARD', 'HIGH', 'PREMIUM', 'EXOTIC', name='resource_quality'), nullable=False),
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.Column('price_per_unit', sa.Integer(), nullable=False),
    sa.Column('total_price', sa.Integer(), nullable=False),
    sa.Column('tax_paid', sa.Integer(), nullable=False),
    sa.Column('negotiated_discount', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['market_id'], ['markets.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['player_id'], ['players.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['ship_id'], ['ships.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.add_column('planets', sa.Column('sector_uuid', sa.UUID(), nullable=True))
    op.add_column('planets', sa.Column('last_updated', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.add_column('planets', sa.Column('type', sa.Enum('TERRAN', 'DESERT', 'OCEANIC', 'ICE', 'VOLCANIC', 'GAS_GIANT', 'BARREN', 'JUNGLE', 'ARCTIC', 'TROPICAL', 'MOUNTAINOUS', 'ARTIFICIAL', name='planet_type'), nullable=False))
    op.add_column('planets', sa.Column('status', sa.Enum('UNINHABITABLE', 'HABITABLE', 'COLONIZED', 'DEVELOPED', 'TERRAFORMING', 'DYING', 'RESTRICTED', name='planet_status'), nullable=False))
    op.add_column('planets', sa.Column('size', sa.Integer(), nullable=False))
    op.add_column('planets', sa.Column('position', sa.Integer(), nullable=False))
    op.add_column('planets', sa.Column('gravity', sa.Float(), nullable=False))
    op.add_column('planets', sa.Column('atmosphere', sa.String(), nullable=True))
    op.add_column('planets', sa.Column('temperature', sa.Float(), nullable=False))
    op.add_column('planets', sa.Column('water_coverage', sa.Float(), nullable=False))
    op.add_column('planets', sa.Column('habitability_score', sa.Integer(), nullable=False))
    op.add_column('planets', sa.Column('radiation_level', sa.Float(), nullable=False))
    op.add_column('planets', sa.Column('resource_richness', sa.Float(), nullable=False))
    op.add_column('planets', sa.Column('resources', postgresql.JSONB(astext_type=sa.Text()), nullable=False))
    op.add_column('planets', sa.Column('special_resources', postgresql.ARRAY(sa.String()), nullable=False))
    op.add_column('planets', sa.Column('colonized_at', sa.DateTime(timezone=True), nullable=True))
    op.add_column('planets', sa.Column('population', sa.Integer(), nullable=False))
    op.add_column('planets', sa.Column('max_population', sa.Integer(), nullable=False))
    op.add_column('planets', sa.Column('population_growth', sa.Float(), nullable=False))
    op.add_column('planets', sa.Column('economy', postgresql.JSONB(astext_type=sa.Text()), nullable=False))
    op.add_column('planets', sa.Column('production', postgresql.JSONB(astext_type=sa.Text()), nullable=False))
    op.add_column('planets', sa.Column('production_efficiency', sa.Float(), nullable=False))
    op.add_column('planets', sa.Column('defense_level', sa.Integer(), nullable=False))
    op.add_column('planets', sa.Column('shields', sa.Integer(), nullable=False))
    op.add_column('planets', sa.Column('weapon_batteries', sa.Integer(), nullable=False))
    op.add_column('planets', sa.Column('last_attacked', sa.DateTime(timezone=True), nullable=True))
    op.add_column('planets', sa.Column('last_production', sa.DateTime(timezone=True), nullable=True))
    op.add_column('planets', sa.Column('active_events', postgresql.JSONB(astext_type=sa.Text()), nullable=False))
    op.add_column('planets', sa.Column('description', sa.String(), nullable=True))
    op.add_column('planets', sa.Column('genesis_created', sa.Boolean(), nullable=False))
    op.add_column('planets', sa.Column('genesis_device_id', sa.UUID(), nullable=True))
    op.create_foreign_key(None, 'planets', 'genesis_devices', ['genesis_device_id'], ['id'])
    op.create_foreign_key(None, 'planets', 'sectors', ['sector_uuid'], ['id'], ondelete='CASCADE')
    op.add_column('ports', sa.Column('sector_uuid', sa.UUID(), nullable=True))
    op.add_column('ports', sa.Column('last_updated', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.add_column('ports', sa.Column('type', sa.Enum('TRADING', 'MILITARY', 'INDUSTRIAL', 'MINING', 'SCIENTIFIC', 'SHIPYARD', 'OUTPOST', 'BLACK_MARKET', 'DIPLOMATIC', 'CORPORATE', name='port_type'), nullable=False))
    op.add_column('ports', sa.Column('status', sa.Enum('OPERATIONAL', 'DAMAGED', 'UNDER_CONSTRUCTION', 'UNDER_ATTACK', 'LOCKDOWN', 'ABANDONED', 'RESTRICTED', name='port_status'), nullable=False))
    op.add_column('ports', sa.Column('size', sa.Integer(), nullable=False))
    op.add_column('ports', sa.Column('faction_affiliation', sa.String(), nullable=True))
    op.add_column('ports', sa.Column('trade_volume', sa.Integer(), nullable=False))
    op.add_column('ports', sa.Column('price_modifiers', postgresql.JSONB(astext_type=sa.Text()), nullable=False))
    op.add_column('ports', sa.Column('import_restrictions', postgresql.ARRAY(sa.String()), nullable=False))
    op.add_column('ports', sa.Column('export_restrictions', postgresql.ARRAY(sa.String()), nullable=False))
    op.add_column('ports', sa.Column('services', postgresql.JSONB(astext_type=sa.Text()), nullable=False))
    op.add_column('ports', sa.Column('service_prices', postgresql.JSONB(astext_type=sa.Text()), nullable=False))
    op.add_column('ports', sa.Column('tax_rate', sa.Float(), nullable=False))
    op.add_column('ports', sa.Column('defense_level', sa.Integer(), nullable=False))
    op.add_column('ports', sa.Column('shields', sa.Integer(), nullable=False))
    op.add_column('ports', sa.Column('defense_weapons', sa.Integer(), nullable=False))
    op.add_column('ports', sa.Column('security_rating', sa.Float(), nullable=False))
    op.add_column('ports', sa.Column('last_attacked', sa.DateTime(timezone=True), nullable=True))
    op.add_column('ports', sa.Column('active_events', postgresql.JSONB(astext_type=sa.Text()), nullable=False))
    op.add_column('ports', sa.Column('description', sa.String(), nullable=True))
    op.add_column('ports', sa.Column('special_features', postgresql.ARRAY(sa.String()), nullable=False))
    op.create_foreign_key(None, 'ports', 'sectors', ['sector_uuid'], ['id'], ondelete='CASCADE')
    op.drop_column('ships', 'genesis_devices')
    op.add_column('teams', sa.Column('tag', sa.String(length=10), nullable=True))
    op.add_column('teams', sa.Column('logo', sa.String(), nullable=True))
    op.add_column('teams', sa.Column('is_public', sa.Boolean(), nullable=False))
    op.add_column('teams', sa.Column('max_members', sa.Integer(), nullable=False))
    op.add_column('teams', sa.Column('sector_claims', postgresql.ARRAY(sa.Integer()), nullable=False))
    op.add_column('teams', sa.Column('home_sector_id', sa.Integer(), nullable=True))
    op.add_column('teams', sa.Column('total_credits', sa.Integer(), nullable=False))
    op.add_column('teams', sa.Column('total_planets', sa.Integer(), nullable=False))
    op.add_column('teams', sa.Column('combat_rating', sa.Float(), nullable=False))
    op.add_column('teams', sa.Column('trade_rating', sa.Float(), nullable=False))
    op.add_column('teams', sa.Column('join_requirements', postgresql.JSONB(astext_type=sa.Text()), nullable=False))
    op.add_column('teams', sa.Column('member_roles', postgresql.JSONB(astext_type=sa.Text()), nullable=False))
    op.add_column('teams', sa.Column('resource_sharing', postgresql.JSONB(astext_type=sa.Text()), nullable=False))
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('teams', 'resource_sharing')
    op.drop_column('teams', 'member_roles')
    op.drop_column('teams', 'join_requirements')
    op.drop_column('teams', 'trade_rating')
    op.drop_column('teams', 'combat_rating')
    op.drop_column('teams', 'total_planets')
    op.drop_column('teams', 'total_credits')
    op.drop_column('teams', 'home_sector_id')
    op.drop_column('teams', 'sector_claims')
    op.drop_column('teams', 'max_members')
    op.drop_column('teams', 'is_public')
    op.drop_column('teams', 'logo')
    op.drop_column('teams', 'tag')
    op.add_column('ships', sa.Column('genesis_devices', sa.INTEGER(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'ports', type_='foreignkey')
    op.drop_column('ports', 'special_features')
    op.drop_column('ports', 'description')
    op.drop_column('ports', 'active_events')
    op.drop_column('ports', 'last_attacked')
    op.drop_column('ports', 'security_rating')
    op.drop_column('ports', 'defense_weapons')
    op.drop_column('ports', 'shields')
    op.drop_column('ports', 'defense_level')
    op.drop_column('ports', 'tax_rate')
    op.drop_column('ports', 'service_prices')
    op.drop_column('ports', 'services')
    op.drop_column('ports', 'export_restrictions')
    op.drop_column('ports', 'import_restrictions')
    op.drop_column('ports', 'price_modifiers')
    op.drop_column('ports', 'trade_volume')
    op.drop_column('ports', 'faction_affiliation')
    op.drop_column('ports', 'size')
    op.drop_column('ports', 'status')
    op.drop_column('ports', 'type')
    op.drop_column('ports', 'last_updated')
    op.drop_column('ports', 'sector_uuid')
    op.drop_constraint(None, 'planets', type_='foreignkey')
    op.drop_constraint(None, 'planets', type_='foreignkey')
    op.drop_column('planets', 'genesis_device_id')
    op.drop_column('planets', 'genesis_created')
    op.drop_column('planets', 'description')
    op.drop_column('planets', 'active_events')
    op.drop_column('planets', 'last_production')
    op.drop_column('planets', 'last_attacked')
    op.drop_column('planets', 'weapon_batteries')
    op.drop_column('planets', 'shields')
    op.drop_column('planets', 'defense_level')
    op.drop_column('planets', 'production_efficiency')
    op.drop_column('planets', 'production')
    op.drop_column('planets', 'economy')
    op.drop_column('planets', 'population_growth')
    op.drop_column('planets', 'max_population')
    op.drop_column('planets', 'population')
    op.drop_column('planets', 'colonized_at')
    op.drop_column('planets', 'special_resources')
    op.drop_column('planets', 'resources')
    op.drop_column('planets', 'resource_richness')
    op.drop_column('planets', 'radiation_level')
    op.drop_column('planets', 'habitability_score')
    op.drop_column('planets', 'water_coverage')
    op.drop_column('planets', 'temperature')
    op.drop_column('planets', 'atmosphere')
    op.drop_column('planets', 'gravity')
    op.drop_column('planets', 'position')
    op.drop_column('planets', 'size')
    op.drop_column('planets', 'status')
    op.drop_column('planets', 'type')
    op.drop_column('planets', 'last_updated')
    op.drop_column('planets', 'sector_uuid')
    op.drop_table('market_transactions')
    op.drop_table('markets')
    op.drop_table('drones')
    op.drop_table('combat_logs')
    op.drop_table('warp_tunnels')
    op.drop_table('sector_warps')
    op.drop_table('sectors')
    op.drop_table('clusters')
    op.drop_table('regions')
    op.drop_table('planet_formations')
    op.drop_table('drone_deployments')
    op.drop_table('resources')
    op.drop_table('genesis_devices')
    op.drop_table('galaxies')
    # ### end Alembic commands ###