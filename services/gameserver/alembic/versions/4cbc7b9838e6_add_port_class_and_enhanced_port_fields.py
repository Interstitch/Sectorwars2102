"""add port class and enhanced port fields

Revision ID: 4cbc7b9838e6
Revises: g7h8i9j0k1l2
Create Date: 2025-05-23 02:46:58.821070

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '4cbc7b9838e6'
down_revision = 'g7h8i9j0k1l2'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Create the port_class enum type
    port_class_enum = postgresql.ENUM('CLASS_0', 'CLASS_1', 'CLASS_2', 'CLASS_3', 'CLASS_4', 'CLASS_5', 'CLASS_6', 'CLASS_7', 'CLASS_8', 'CLASS_9', 'CLASS_10', 'CLASS_11', name='port_class')
    port_class_enum.create(op.get_bind())
    op.create_table('genesis_devices',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('last_updated', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('serial_number', sa.String(length=50), nullable=False),
    sa.Column('type', sa.Enum('STANDARD', 'ENHANCED', 'SPECIALIZED', 'ADVANCED', 'EXPERIMENTAL', 'QUANTUM', name='genesis_type'), nullable=False),
    sa.Column('status', sa.Enum('INACTIVE', 'DEPLOYING', 'ACTIVE', 'COMPLETED', 'FAILED', 'UNSTABLE', 'ABORTED', name='genesis_status'), nullable=False),
    sa.Column('owner_id', sa.UUID(), nullable=False),
    sa.Column('creator_faction', sa.String(), nullable=True),
    sa.Column('ship_id', sa.UUID(), nullable=True),
    sa.Column('sector_id', sa.Integer(), nullable=True),
    sa.Column('planet_id', sa.UUID(), nullable=True),
    sa.Column('deployed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('terraforming_power', sa.Integer(), nullable=False),
    sa.Column('terraforming_types', postgresql.ARRAY(sa.String()), nullable=False),
    sa.Column('resource_generation', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('special_features', postgresql.ARRAY(sa.String()), nullable=False),
    sa.Column('phase', sa.Integer(), nullable=False),
    sa.Column('total_phases', sa.Integer(), nullable=False),
    sa.Column('progress', sa.Float(), nullable=False),
    sa.Column('estimated_completion', sa.DateTime(timezone=True), nullable=True),
    sa.Column('resource_consumption', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('stability', sa.Float(), nullable=False),
    sa.Column('failure_chance', sa.Float(), nullable=False),
    sa.Column('security_level', sa.Integer(), nullable=False),
    sa.Column('access_code', sa.String(), nullable=True),
    sa.Column('result_planet_type', sa.String(), nullable=True),
    sa.Column('result_planet_quality', sa.Float(), nullable=True),
    sa.Column('result_resources', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('result_special_features', postgresql.ARRAY(sa.String()), nullable=True),
    sa.ForeignKeyConstraint(['owner_id'], ['players.id'], ),
    sa.ForeignKeyConstraint(['planet_id'], ['planets.id'], ),
    sa.ForeignKeyConstraint(['ship_id'], ['ships.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('serial_number')
    )
    op.create_table('resources',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('last_updated', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('type', sa.Enum('FUEL', 'ORGANICS', 'EQUIPMENT', 'POPULATION', 'ORE', 'MINERALS', 'LUXURY_GOODS', 'TECHNOLOGY', 'MEDICAL_SUPPLIES', 'INDUSTRIAL_MATERIALS', 'QUANTUM_COMPONENTS', 'EXOTIC_MATTER', name='resource_type'), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('base_value', sa.Integer(), nullable=False),
    sa.Column('quality', sa.Enum('LOW', 'STANDARD', 'HIGH', 'PREMIUM', 'EXOTIC', name='resource_quality'), nullable=False),
    sa.Column('value_multiplier', sa.Float(), nullable=False),
    sa.Column('weight', sa.Float(), nullable=False),
    sa.Column('trade_volume', sa.Integer(), nullable=False),
    sa.Column('price_volatility', sa.Float(), nullable=False),
    sa.Column('base_production_rate', sa.Float(), nullable=False),
    sa.Column('production_difficulty', sa.Integer(), nullable=False),
    sa.Column('special_attributes', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('required_technology', sa.String(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('ship_rarity_configs',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('ship_type', sa.Enum('SCOUT_SHIP', 'CARGO_FREIGHTER', 'ESCAPE_POD', 'LIGHT_FREIGHTER', 'DEFENDER', 'FAST_COURIER', name='ship_type_config'), nullable=False),
    sa.Column('rarity_tier', sa.Integer(), nullable=False),
    sa.Column('spawn_chance', sa.Integer(), nullable=False),
    sa.Column('base_credits', sa.Integer(), nullable=False),
    sa.Column('weak_threshold', sa.Float(), nullable=False),
    sa.Column('average_threshold', sa.Float(), nullable=False),
    sa.Column('strong_threshold', sa.Float(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('ship_type')
    )
    op.create_table('drone_deployments',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('player_id', sa.UUID(), nullable=False),
    sa.Column('sector_id', sa.Integer(), nullable=False),
    sa.Column('deployment_time', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('drone_count', sa.Integer(), nullable=False),
    sa.Column('pattern', sa.String(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('last_combat', sa.DateTime(timezone=True), nullable=True),
    sa.Column('drones_lost', sa.Integer(), nullable=False),
    sa.Column('enemies_destroyed', sa.Integer(), nullable=False),
    sa.Column('combat_effectiveness', sa.Float(), nullable=False),
    sa.Column('special_abilities', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.ForeignKeyConstraint(['player_id'], ['players.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('first_login_sessions',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('player_id', sa.UUID(), nullable=False),
    sa.Column('started_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('ai_service_used', sa.Boolean(), nullable=False),
    sa.Column('fallback_to_rules', sa.Boolean(), nullable=False),
    sa.Column('ship_claimed', sa.Enum('SCOUT_SHIP', 'CARGO_FREIGHTER', 'ESCAPE_POD', 'LIGHT_FREIGHTER', 'DEFENDER', 'FAST_COURIER', name='ship_choice'), nullable=True),
    sa.Column('extracted_player_name', sa.String(), nullable=True),
    sa.Column('negotiation_skill', sa.Enum('WEAK', 'AVERAGE', 'STRONG', name='negotiation_skill_level'), nullable=True),
    sa.Column('final_persuasion_score', sa.Float(), nullable=True),
    sa.Column('outcome', sa.Enum('SUCCESS', 'PARTIAL_SUCCESS', 'FAILURE', name='dialogue_outcome'), nullable=True),
    sa.Column('awarded_ship', sa.Enum('SCOUT_SHIP', 'CARGO_FREIGHTER', 'ESCAPE_POD', 'LIGHT_FREIGHTER', 'DEFENDER', 'FAST_COURIER', name='awarded_ship_type'), nullable=True),
    sa.Column('starting_credits', sa.Integer(), nullable=True),
    sa.Column('negotiation_bonus_flag', sa.Boolean(), nullable=True),
    sa.Column('notoriety_penalty', sa.Boolean(), nullable=True),
    sa.Column('client_info', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('performance_metrics', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.ForeignKeyConstraint(['player_id'], ['players.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('planet_formations',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('genesis_device_id', sa.UUID(), nullable=False),
    sa.Column('sector_id', sa.Integer(), nullable=False),
    sa.Column('original_conditions', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('started_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('estimated_duration', sa.Integer(), nullable=False),
    sa.Column('current_phase', sa.Integer(), nullable=False),
    sa.Column('total_phases', sa.Integer(), nullable=False),
    sa.Column('is_completed', sa.Boolean(), nullable=False),
    sa.Column('is_failed', sa.Boolean(), nullable=False),
    sa.Column('failure_reason', sa.String(), nullable=True),
    sa.Column('resulting_planet_id', sa.UUID(), nullable=True),
    sa.Column('formation_log', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('anomalies', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.ForeignKeyConstraint(['genesis_device_id'], ['genesis_devices.id'], ),
    sa.ForeignKeyConstraint(['resulting_planet_id'], ['planets.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('dialogue_exchanges',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('session_id', sa.UUID(), nullable=False),
    sa.Column('sequence_number', sa.Integer(), nullable=False),
    sa.Column('npc_prompt', sa.String(), nullable=False),
    sa.Column('player_response', sa.String(), nullable=False),
    sa.Column('timestamp', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('topic', sa.String(), nullable=True),
    sa.Column('persuasiveness', sa.Float(), nullable=True),
    sa.Column('confidence', sa.Float(), nullable=True),
    sa.Column('consistency', sa.Float(), nullable=True),
    sa.Column('key_extracted_info', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('detected_contradictions', sa.ARRAY(sa.String()), nullable=True),
    sa.ForeignKeyConstraint(['session_id'], ['first_login_sessions.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('player_first_login_states',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('player_id', sa.UUID(), nullable=False),
    sa.Column('has_completed_first_login', sa.Boolean(), nullable=False),
    sa.Column('current_session_id', sa.UUID(), nullable=True),
    sa.Column('attempts', sa.Integer(), nullable=False),
    sa.Column('last_attempt_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('claimed_ship', sa.Boolean(), nullable=False),
    sa.Column('answered_questions', sa.Boolean(), nullable=False),
    sa.Column('received_resources', sa.Boolean(), nullable=False),
    sa.Column('tutorial_started', sa.Boolean(), nullable=False),
    sa.Column('previous_ship_claims', sa.ARRAY(sa.String()), nullable=False),
    sa.Column('previous_dialogue_strategies', sa.ARRAY(sa.String()), nullable=False),
    sa.ForeignKeyConstraint(['current_session_id'], ['first_login_sessions.id'], ),
    sa.ForeignKeyConstraint(['player_id'], ['players.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('player_id')
    )
    op.create_table('ship_presentation_options',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('session_id', sa.UUID(), nullable=False),
    sa.Column('available_ships', sa.ARRAY(sa.String()), nullable=False),
    sa.Column('escape_pod_present', sa.Boolean(), nullable=False),
    sa.Column('rarity_roll', sa.Integer(), nullable=False),
    sa.Column('special_event_active', sa.Boolean(), nullable=False),
    sa.Column('seed_value', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['session_id'], ['first_login_sessions.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('combat_logs',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('timestamp', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('combat_type', sa.Enum('SHIP_VS_SHIP', 'SHIP_VS_PLANET', 'SHIP_VS_PORT', 'SHIP_VS_DRONES', 'PLANET_DEFENSE', 'PORT_DEFENSE', 'SECTOR_DEFENSE', name='combat_type'), nullable=False),
    sa.Column('combat_result', sa.Enum('ATTACKER_VICTORY', 'DEFENDER_VICTORY', 'DRAW', 'ATTACKER_FLED', 'DEFENDER_FLED', 'MUTUAL_DESTRUCTION', 'ABANDONED', name='combat_result'), nullable=False),
    sa.Column('sector_id', sa.Integer(), nullable=False),
    sa.Column('sector_uuid', sa.UUID(), nullable=True),
    sa.Column('attacker_id', sa.UUID(), nullable=False),
    sa.Column('attacker_ship_id', sa.UUID(), nullable=True),
    sa.Column('defender_id', sa.UUID(), nullable=True),
    sa.Column('defender_ship_id', sa.UUID(), nullable=True),
    sa.Column('planet_id', sa.UUID(), nullable=True),
    sa.Column('port_id', sa.UUID(), nullable=True),
    sa.Column('attacker_team_id', sa.UUID(), nullable=True),
    sa.Column('defender_team_id', sa.UUID(), nullable=True),
    sa.Column('turns_consumed', sa.Integer(), nullable=False),
    sa.Column('combat_rounds', sa.Integer(), nullable=False),
    sa.Column('attacker_drones_lost', sa.Integer(), nullable=False),
    sa.Column('defender_drones_lost', sa.Integer(), nullable=False),
    sa.Column('attacker_ship_destroyed', sa.Boolean(), nullable=False),
    sa.Column('defender_ship_destroyed', sa.Boolean(), nullable=False),
    sa.Column('credits_transferred', sa.Integer(), nullable=False),
    sa.Column('resources_captured', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('reputation_changes', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('combat_details', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.ForeignKeyConstraint(['attacker_id'], ['players.id'], ),
    sa.ForeignKeyConstraint(['attacker_ship_id'], ['ships.id'], ),
    sa.ForeignKeyConstraint(['attacker_team_id'], ['teams.id'], ),
    sa.ForeignKeyConstraint(['defender_id'], ['players.id'], ),
    sa.ForeignKeyConstraint(['defender_ship_id'], ['ships.id'], ),
    sa.ForeignKeyConstraint(['defender_team_id'], ['teams.id'], ),
    sa.ForeignKeyConstraint(['planet_id'], ['planets.id'], ),
    sa.ForeignKeyConstraint(['port_id'], ['ports.id'], ),
    sa.ForeignKeyConstraint(['sector_uuid'], ['sectors.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('drones',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('owner_id', sa.UUID(), nullable=False),
    sa.Column('ship_id', sa.UUID(), nullable=True),
    sa.Column('planet_id', sa.UUID(), nullable=True),
    sa.Column('port_id', sa.UUID(), nullable=True),
    sa.Column('sector_id', sa.Integer(), nullable=True),
    sa.Column('attack_power', sa.Integer(), nullable=False),
    sa.Column('defense_power', sa.Integer(), nullable=False),
    sa.Column('health', sa.Integer(), nullable=False),
    sa.Column('fuel_efficiency', sa.Float(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_damaged', sa.Boolean(), nullable=False),
    sa.Column('damage_level', sa.Integer(), nullable=False),
    sa.Column('is_deployed', sa.Boolean(), nullable=False),
    sa.Column('deployment_mode', sa.String(), nullable=False),
    sa.ForeignKeyConstraint(['owner_id'], ['players.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['planet_id'], ['planets.id'], ),
    sa.ForeignKeyConstraint(['port_id'], ['ports.id'], ),
    sa.ForeignKeyConstraint(['ship_id'], ['ships.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('markets',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('last_updated', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('port_id', sa.UUID(), nullable=False),
    sa.Column('specialization', sa.String(), nullable=True),
    sa.Column('size', sa.Integer(), nullable=False),
    sa.Column('tax_rate', sa.Float(), nullable=False),
    sa.Column('economic_status', sa.String(), nullable=False),
    sa.Column('resource_availability', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('resource_prices', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('price_modifiers', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('daily_volume', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('price_history', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('black_market', sa.Boolean(), nullable=False),
    sa.Column('special_offers', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('trade_restrictions', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.ForeignKeyConstraint(['port_id'], ['ports.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('market_transactions',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('timestamp', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('market_id', sa.UUID(), nullable=False),
    sa.Column('player_id', sa.UUID(), nullable=False),
    sa.Column('ship_id', sa.UUID(), nullable=True),
    sa.Column('is_purchase', sa.Boolean(), nullable=False),
    sa.Column('resource_type', sa.Enum('FUEL', 'ORGANICS', 'EQUIPMENT', 'POPULATION', 'ORE', 'MINERALS', 'LUXURY_GOODS', 'TECHNOLOGY', 'MEDICAL_SUPPLIES', 'INDUSTRIAL_MATERIALS', 'QUANTUM_COMPONENTS', 'EXOTIC_MATTER', name='resource_type'), nullable=False),
    sa.Column('resource_quality', sa.Enum('LOW', 'STANDARD', 'HIGH', 'PREMIUM', 'EXOTIC', name='resource_quality'), nullable=False),
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.Column('price_per_unit', sa.Integer(), nullable=False),
    sa.Column('total_price', sa.Integer(), nullable=False),
    sa.Column('tax_paid', sa.Integer(), nullable=False),
    sa.Column('negotiated_discount', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['market_id'], ['markets.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['player_id'], ['players.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['ship_id'], ['ships.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.alter_column('planets', 'population',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               existing_nullable=False)
    op.alter_column('planets', 'max_population',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               existing_nullable=False)
    op.create_foreign_key(None, 'planets', 'genesis_devices', ['genesis_device_id'], ['id'])
    op.add_column('ports', sa.Column('port_class', sa.Enum('CLASS_0', 'CLASS_1', 'CLASS_2', 'CLASS_3', 'CLASS_4', 'CLASS_5', 'CLASS_6', 'CLASS_7', 'CLASS_8', 'CLASS_9', 'CLASS_10', 'CLASS_11', name='port_class'), nullable=False, server_default='CLASS_1'))
    op.add_column('ports', sa.Column('market_volatility', sa.Integer(), nullable=False, server_default='5'))
    op.add_column('ports', sa.Column('commodities', postgresql.JSONB(astext_type=sa.Text()), nullable=False, server_default='{}'))
    op.add_column('ports', sa.Column('trader_personality', postgresql.JSONB(astext_type=sa.Text()), nullable=False, server_default='{}'))
    op.add_column('ports', sa.Column('defenses', postgresql.JSONB(astext_type=sa.Text()), nullable=False, server_default='{}'))
    op.add_column('ports', sa.Column('ownership', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('ports', sa.Column('last_market_update', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.add_column('ports', sa.Column('market_update_frequency', sa.Integer(), nullable=False, server_default='60'))
    op.add_column('ports', sa.Column('reputation_threshold', sa.Integer(), nullable=False, server_default='0'))
    op.add_column('ports', sa.Column('is_quest_hub', sa.Boolean(), nullable=False, server_default='false'))
    op.add_column('ports', sa.Column('is_faction_headquarters', sa.Boolean(), nullable=False, server_default='false'))
    op.add_column('ports', sa.Column('is_player_ownable', sa.Boolean(), nullable=False, server_default='false'))
    op.add_column('ports', sa.Column('acquisition_requirements', postgresql.JSONB(astext_type=sa.Text()), nullable=False, server_default='{}'))
    op.add_column('ports', sa.Column('is_destroyed', sa.Boolean(), nullable=False, server_default='false'))
    op.add_column('ports', sa.Column('recovery_time', sa.DateTime(timezone=True), nullable=True))
    op.add_column('ports', sa.Column('special_services', postgresql.ARRAY(sa.String()), nullable=False, server_default='{}'))
    op.drop_column('ports', 'export_restrictions')
    op.drop_column('ports', 'tax_rate')
    op.drop_column('ports', 'shields')
    op.drop_column('ports', 'security_rating')
    op.drop_column('ports', 'defense_weapons')
    op.drop_column('ports', 'special_features')
    op.drop_column('ports', 'defense_level')
    op.drop_column('ports', 'import_restrictions')
    op.drop_column('ships', 'genesis_devices')
    op.add_column('teams', sa.Column('tag', sa.String(length=10), nullable=True))
    op.add_column('teams', sa.Column('logo', sa.String(), nullable=True))
    op.add_column('teams', sa.Column('is_public', sa.Boolean(), nullable=False, server_default='true'))
    op.add_column('teams', sa.Column('max_members', sa.Integer(), nullable=False, server_default='20'))
    op.add_column('teams', sa.Column('sector_claims', postgresql.ARRAY(sa.Integer()), nullable=False, server_default='{}'))
    op.add_column('teams', sa.Column('home_sector_id', sa.Integer(), nullable=True))
    op.add_column('teams', sa.Column('total_credits', sa.Integer(), nullable=False, server_default='0'))
    op.add_column('teams', sa.Column('total_planets', sa.Integer(), nullable=False, server_default='0'))
    op.add_column('teams', sa.Column('combat_rating', sa.Float(), nullable=False, server_default='0.0'))
    op.add_column('teams', sa.Column('trade_rating', sa.Float(), nullable=False, server_default='0.0'))
    op.add_column('teams', sa.Column('join_requirements', postgresql.JSONB(astext_type=sa.Text()), nullable=False, server_default='{}'))
    op.add_column('teams', sa.Column('member_roles', postgresql.JSONB(astext_type=sa.Text()), nullable=False, server_default='{}'))
    op.add_column('teams', sa.Column('resource_sharing', postgresql.JSONB(astext_type=sa.Text()), nullable=False, server_default='{}'))
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('teams', 'resource_sharing')
    op.drop_column('teams', 'member_roles')
    op.drop_column('teams', 'join_requirements')
    op.drop_column('teams', 'trade_rating')
    op.drop_column('teams', 'combat_rating')
    op.drop_column('teams', 'total_planets')
    op.drop_column('teams', 'total_credits')
    op.drop_column('teams', 'home_sector_id')
    op.drop_column('teams', 'sector_claims')
    op.drop_column('teams', 'max_members')
    op.drop_column('teams', 'is_public')
    op.drop_column('teams', 'logo')
    op.drop_column('teams', 'tag')
    op.add_column('ships', sa.Column('genesis_devices', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('ports', sa.Column('import_restrictions', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=False))
    op.add_column('ports', sa.Column('defense_level', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('ports', sa.Column('special_features', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=False))
    op.add_column('ports', sa.Column('defense_weapons', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('ports', sa.Column('security_rating', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False))
    op.add_column('ports', sa.Column('shields', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('ports', sa.Column('tax_rate', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False))
    op.add_column('ports', sa.Column('export_restrictions', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=False))
    op.drop_column('ports', 'special_services')
    op.drop_column('ports', 'recovery_time')
    op.drop_column('ports', 'is_destroyed')
    op.drop_column('ports', 'acquisition_requirements')
    op.drop_column('ports', 'is_player_ownable')
    op.drop_column('ports', 'is_faction_headquarters')
    op.drop_column('ports', 'is_quest_hub')
    op.drop_column('ports', 'reputation_threshold')
    op.drop_column('ports', 'market_update_frequency')
    op.drop_column('ports', 'last_market_update')
    op.drop_column('ports', 'ownership')
    op.drop_column('ports', 'defenses')
    op.drop_column('ports', 'trader_personality')
    op.drop_column('ports', 'commodities')
    op.drop_column('ports', 'market_volatility')
    op.drop_column('ports', 'port_class')
    op.drop_constraint(None, 'planets', type_='foreignkey')
    op.alter_column('planets', 'max_population',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               existing_nullable=False)
    op.alter_column('planets', 'population',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               existing_nullable=False)
    op.drop_table('market_transactions')
    op.drop_table('markets')
    op.drop_table('drones')
    op.drop_table('combat_logs')
    op.drop_table('ship_presentation_options')
    op.drop_table('player_first_login_states')
    op.drop_table('dialogue_exchanges')
    op.drop_table('planet_formations')
    op.drop_table('first_login_sessions')
    op.drop_table('drone_deployments')
    op.drop_table('ship_rarity_configs')
    op.drop_table('resources')
    op.drop_table('genesis_devices')
    # ### end Alembic commands ###