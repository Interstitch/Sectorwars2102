"""Add ESCAPE_POD ship type

Revision ID: 467070aeef95
Revises: bdcf003bb8f4
Create Date: 2025-05-24 16:31:27.243964

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '467070aeef95'
down_revision = 'bdcf003bb8f4'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('ai_model_performance',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('model_name', sa.String(length=100), nullable=False),
    sa.Column('model_version', sa.String(length=50), nullable=False),
    sa.Column('performance_date', sa.Date(), nullable=False),
    sa.Column('total_predictions', sa.Integer(), nullable=False),
    sa.Column('correct_predictions', sa.Integer(), nullable=False),
    sa.Column('accuracy_percentage', sa.Numeric(precision=5, scale=2), nullable=False),
    sa.Column('average_confidence', sa.Numeric(precision=3, scale=2), nullable=False),
    sa.Column('user_acceptance_rate', sa.Numeric(precision=3, scale=2), nullable=False),
    sa.Column('average_user_satisfaction', sa.Numeric(precision=3, scale=2), nullable=True),
    sa.Column('profit_improvement_rate', sa.Numeric(precision=5, scale=2), nullable=True),
    sa.Column('performance_metrics', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('ai_recommendations',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('player_id', sa.UUID(), nullable=False),
    sa.Column('recommendation_type', sa.String(length=50), nullable=False),
    sa.Column('recommendation_data', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('confidence_score', sa.Numeric(precision=3, scale=2), nullable=False),
    sa.Column('expected_profit', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('risk_assessment', sa.String(length=20), nullable=False),
    sa.Column('reasoning', sa.Text(), nullable=True),
    sa.Column('priority_level', sa.Integer(), nullable=False),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('accepted', sa.Boolean(), nullable=True),
    sa.Column('acceptance_timestamp', sa.DateTime(timezone=True), nullable=True),
    sa.Column('outcome_profit', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('outcome_timestamp', sa.DateTime(timezone=True), nullable=True),
    sa.Column('feedback_score', sa.Integer(), nullable=True),
    sa.Column('feedback_text', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['player_id'], ['players.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('ai_market_predictions',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('commodity_id', sa.UUID(), nullable=False),
    sa.Column('sector_id', sa.UUID(), nullable=False),
    sa.Column('predicted_price', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('confidence_interval', sa.Numeric(precision=3, scale=2), nullable=False),
    sa.Column('prediction_horizon', sa.Integer(), nullable=False),
    sa.Column('model_version', sa.String(length=50), nullable=False),
    sa.Column('training_data_points', sa.Integer(), nullable=False),
    sa.Column('prediction_factors', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('actual_price', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('accuracy_score', sa.Numeric(precision=3, scale=2), nullable=True),
    sa.ForeignKeyConstraint(['sector_id'], ['sectors.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('ai_training_data',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('data_type', sa.String(length=50), nullable=False),
    sa.Column('sector_id', sa.UUID(), nullable=True),
    sa.Column('commodity_id', sa.UUID(), nullable=True),
    sa.Column('timestamp', sa.DateTime(timezone=True), nullable=False),
    sa.Column('data_value', sa.Numeric(precision=12, scale=4), nullable=False),
    sa.Column('contextual_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('quality_score', sa.Numeric(precision=3, scale=2), nullable=False),
    sa.Column('used_in_training', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['sector_id'], ['sectors.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('player_trading_profiles',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('player_id', sa.UUID(), nullable=False),
    sa.Column('risk_tolerance', sa.Numeric(precision=3, scale=2), nullable=False),
    sa.Column('preferred_commodities', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('avoided_sectors', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('trading_patterns', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('performance_metrics', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('ai_assistance_level', sa.String(length=20), nullable=False),
    sa.Column('notification_preferences', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('learning_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('last_active_sector', sa.UUID(), nullable=True),
    sa.Column('average_profit_per_trade', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('total_trades_analyzed', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['last_active_sector'], ['sectors.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['player_id'], ['players.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('player_id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('player_trading_profiles')
    op.drop_table('ai_training_data')
    op.drop_table('ai_market_predictions')
    op.drop_table('ai_recommendations')
    op.drop_table('ai_model_performance')
    # ### end Alembic commands ###