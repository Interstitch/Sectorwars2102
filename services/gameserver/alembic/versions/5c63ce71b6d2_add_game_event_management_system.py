"""add_game_event_management_system

Revision ID: 5c63ce71b6d2
Revises: 2c17c2a4028f
Create Date: 2025-05-24 00:51:04.546121

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '5c63ce71b6d2'
down_revision = '2c17c2a4028f'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('event_templates',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=200), nullable=False),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('event_type', sa.Enum('ECONOMIC', 'COMBAT', 'EXPLORATION', 'SEASONAL', 'EMERGENCY', 'STORY', name='eventtype'), nullable=False),
    sa.Column('default_duration_hours', sa.Integer(), nullable=False),
    sa.Column('default_effects', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('default_rewards', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('usage_count', sa.Integer(), nullable=False),
    sa.Column('created_by', sa.UUID(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_system_template', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('game_events',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('title', sa.String(length=200), nullable=False),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('event_type', sa.Enum('ECONOMIC', 'COMBAT', 'EXPLORATION', 'SEASONAL', 'EMERGENCY', 'STORY', name='eventtype'), nullable=False),
    sa.Column('status', sa.Enum('SCHEDULED', 'ACTIVE', 'COMPLETED', 'CANCELLED', 'PAUSED', name='eventstatus'), nullable=False),
    sa.Column('start_time', sa.DateTime(timezone=True), nullable=False),
    sa.Column('end_time', sa.DateTime(timezone=True), nullable=False),
    sa.Column('actual_start_time', sa.DateTime(timezone=True), nullable=True),
    sa.Column('actual_end_time', sa.DateTime(timezone=True), nullable=True),
    sa.Column('affected_regions', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('affected_sectors', postgresql.ARRAY(sa.Integer()), nullable=True),
    sa.Column('global_event', sa.Boolean(), nullable=False),
    sa.Column('participation_requirements', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('rewards', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('max_participants', sa.Integer(), nullable=True),
    sa.Column('participation_count', sa.Integer(), nullable=False),
    sa.Column('rewards_distributed', sa.Integer(), nullable=False),
    sa.Column('completion_rate', sa.Float(), nullable=False),
    sa.Column('created_by', sa.UUID(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('auto_start', sa.Boolean(), nullable=False),
    sa.Column('auto_end', sa.Boolean(), nullable=False),
    sa.Column('repeatable', sa.Boolean(), nullable=False),
    sa.Column('priority', sa.Integer(), nullable=False),
    sa.Column('admin_notes', sa.Text(), nullable=True),
    sa.Column('requires_approval', sa.Boolean(), nullable=False),
    sa.Column('approved_by', sa.UUID(), nullable=True),
    sa.Column('approved_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['approved_by'], ['users.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('event_effects',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('event_id', sa.UUID(), nullable=False),
    sa.Column('effect_type', sa.String(length=50), nullable=False),
    sa.Column('target', sa.String(length=100), nullable=False),
    sa.Column('modifier', sa.Float(), nullable=False),
    sa.Column('duration_hours', sa.Integer(), nullable=True),
    sa.Column('sector_ids', postgresql.ARRAY(sa.Integer()), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('effect_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('applied_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['event_id'], ['game_events.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('event_logs',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('event_id', sa.UUID(), nullable=False),
    sa.Column('action', sa.String(length=100), nullable=False),
    sa.Column('details', sa.Text(), nullable=True),
    sa.Column('log_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('actor_type', sa.String(length=20), nullable=False),
    sa.Column('actor_id', sa.UUID(), nullable=True),
    sa.Column('logged_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['event_id'], ['game_events.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('event_participations',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('event_id', sa.UUID(), nullable=False),
    sa.Column('player_id', sa.UUID(), nullable=False),
    sa.Column('joined_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('last_activity', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('objectives_completed', sa.Integer(), nullable=False),
    sa.Column('total_objectives', sa.Integer(), nullable=False),
    sa.Column('progress_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('rewards_earned', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('rewards_claimed', sa.Boolean(), nullable=False),
    sa.Column('claimed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('score', sa.Integer(), nullable=False),
    sa.Column('rank', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['event_id'], ['game_events.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['player_id'], ['players.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('event_participations')
    op.drop_table('event_logs')
    op.drop_table('event_effects')
    op.drop_table('game_events')
    op.drop_table('event_templates')
    # ### end Alembic commands ###