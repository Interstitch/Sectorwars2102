user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log notice;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log /var/log/nginx/access.log main;

    # Performance tuning
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 50M;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=auth:10m rate=5r/s;
    limit_req_zone $binary_remote_addr zone=general:10m rate=100r/s;

    # Upstream definitions
    upstream gameserver_backend {
        least_conn;
        server gameserver:8080 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    upstream admin_ui_backend {
        least_conn;
        server admin-ui:3000 max_fails=3 fail_timeout=30s;
        keepalive 16;
    }

    upstream player_client_backend {
        least_conn;
        server player-client:3000 max_fails=3 fail_timeout=30s;
        keepalive 16;
    }

    # upstream region_manager_backend {
    #     least_conn;
    #     server region-manager:8081 max_fails=3 fail_timeout=30s;
    #     keepalive 8;
    # }

    # Regional backends (dynamically populated)
    include /etc/nginx/conf.d/regions/*.conf;

    # SSL configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    # Security headers
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;

    # Main server block
    server {
        listen 80 default_server;
        listen [::]:80 default_server;
        server_name _;

        # Redirect HTTP to HTTPS in production
        return 301 https://$server_name$request_uri;
    }

    # HTTPS server
    server {
        listen 443 ssl http2 default_server;
        listen [::]:443 ssl http2 default_server;
        server_name _;

        # SSL certificates (should be mounted from host)
        ssl_certificate /etc/nginx/ssl/cert.pem;
        ssl_certificate_key /etc/nginx/ssl/key.pem;

        # Root location - Player Client
        location / {
            limit_req zone=general burst=20 nodelay;
            
            proxy_pass http://player_client_backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            proxy_read_timeout 86400;
        }

        # Admin UI
        location /admin/ {
            limit_req zone=general burst=10 nodelay;
            
            proxy_pass http://admin_ui_backend/;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
        }

        # Game Server API
        location /api/v1/ {
            limit_req zone=api burst=50 nodelay;
            
            proxy_pass http://gameserver_backend/api/v1/;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 5s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # Enable CORS for API
            add_header Access-Control-Allow-Origin $http_origin always;
            add_header Access-Control-Allow-Credentials true always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS, PATCH" always;
            add_header Access-Control-Allow-Headers "Accept, Authorization, Cache-Control, Content-Type, DNT, If-Modified-Since, Keep-Alive, Origin, User-Agent, X-Requested-With" always;
            
            if ($request_method = 'OPTIONS') {
                return 204;
            }
        }

        # Regional API routing
        location ~ ^/api/v1/regions/([^/]+)/(.*)$ {
            limit_req zone=api burst=30 nodelay;
            
            set $region_name $1;
            set $region_path $2;
            
            # Proxy to regional server based on region name
            proxy_pass http://region-$region_name-server:8080/api/v1/$region_path$is_args$args;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Region-Name $region_name;
            proxy_connect_timeout 5s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # Enable CORS
            add_header Access-Control-Allow-Origin $http_origin always;
            add_header Access-Control-Allow-Credentials true always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS, PATCH" always;
            add_header Access-Control-Allow-Headers "Accept, Authorization, Cache-Control, Content-Type, DNT, If-Modified-Since, Keep-Alive, Origin, User-Agent, X-Requested-With" always;
        }

        # Region Manager API (Commented out for development)
        # location /api/v1/region-manager/ {
        #     limit_req zone=api burst=10 nodelay;
        #     
        #     # Restrict access to admin users only
        #     access_by_lua_block {
        #         -- Add authentication check here if needed
        #     }
        #     
        #     proxy_pass http://region_manager_backend/;
        #     proxy_http_version 1.1;
        #     proxy_set_header Host $host;
        #     proxy_set_header X-Real-IP $remote_addr;
        #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        #     proxy_set_header X-Forwarded-Proto $scheme;
        # }

        # WebSocket support for real-time features
        location /ws/ {
            proxy_pass http://gameserver_backend/ws/;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_read_timeout 86400;
            proxy_send_timeout 86400;
        }

        # Regional WebSocket routing
        location ~ ^/ws/regions/([^/]+)/(.*)$ {
            set $region_name $1;
            set $region_path $2;
            
            proxy_pass http://region-$region_name-server:8080/ws/$region_path;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Region-Name $region_name;
            proxy_read_timeout 86400;
            proxy_send_timeout 86400;
        }

        # Health checks
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # Monitoring endpoints
        location /metrics {
            # Restrict to monitoring systems
            allow 172.20.0.0/16;  # Nexus network
            allow 172.21.0.0/16;  # Regional network
            deny all;
            
            proxy_pass http://gameserver_backend/api/v1/status/metrics;
            proxy_set_header Host $host;
        }

        # Static assets with long-term caching
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header X-Content-Type-Options nosniff;
        }

        # Deny access to sensitive files
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }

        location ~ ~$ {
            deny all;
            access_log off;
            log_not_found off;
        }

        # Custom error pages
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        
        location = /404.html {
            root /usr/share/nginx/html;
            internal;
        }
        
        location = /50x.html {
            root /usr/share/nginx/html;
            internal;
        }
    }

    # Regional server template (generated dynamically)
    # This would be populated by the region manager
    # server {
    #     listen 443 ssl http2;
    #     server_name region-NAME.sectorwars.com;
    #     
    #     location / {
    #         proxy_pass http://region-NAME-server:8080;
    #         # ... other config
    #     }
    # }
}

# Stream block for TCP/UDP load balancing (if needed)
stream {
    # Regional database connections (if direct access is needed)
    # upstream region_db_cluster {
    #     server region-db-1:5432;
    #     server region-db-2:5432;
    # }
    
    # server {
    #     listen 5432;
    #     proxy_pass region_db_cluster;
    #     proxy_timeout 1s;
    #     proxy_responses 1;
    # }
}