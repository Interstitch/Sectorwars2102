OVERVIEW:
Development workflow spans three environments (local MacBook with Cursor, GitHub Codespaces, and Replit) with process management and containerization options to ensure application consistency and Neon PostgreSQL ensuring data persistence.

FACTS:
* Development occurs across three distinct environments
* Multiple deployment options are available:
  * Docker-based containers for consistent environment behavior
  * PM2-based process management for environments like Replit that don't support Docker
* Neon PostgreSQL provides remote database accessible from all environments
* Environment detection configures appropriate settings automatically
* Environment variables control connection parameters
* Replit uses PM2 to manage multiple services without Docker
* VSCode devcontainer config for Codespaces development
* Docker Compose orchestrates multi-container development setup
* Volume mounts enable hot-reloading of code changes
* Development scripts automate common tasks

TERMINOLOGY:
* Environment Detection: System to identify current development environment
* Hot Reload: Automatic application restart when code changes
* Volume Mount: Mechanism to share files between host and container
* Devcontainer: VSCode container configuration for development
* Replit: Cloud IDE with iPad compatibility
* PM2: Process Manager for Node.js applications (used for all services in Replit)

FILES:
- /
  ├── .devcontainer/              # VSCode devcontainer configuration
  │   └── devcontainer.json
  ├── .replit                     # Replit configuration
  ├── replit.nix                  # Replit Nix package configuration
  ├── docker-compose.yml          # Main Docker Compose configuration
  ├── docker-compose.combined.yml # Single-container Docker configuration
  ├── docker-compose.replit.yml   # Replit-specific Docker configuration (fallback)
  ├── Dockerfile                  # Combined services Dockerfile
  ├── pm2.config.js               # PM2 configuration for Docker environment
  ├── pm2.replit.config.js        # PM2 configuration for Replit environment
  ├── dev-scripts/
  │   ├── start.sh                # Unified start script with environment detection
  │   ├── replit-setup.sh         # Replit setup with PM2
  │   ├── replit-setup-simple.sh  # Simplified Replit setup without Nix
  │   └── start-replit.sh         # Replit-specific startup with PM2
  └── .env.example                # Example environment variables

SCHEMA:
No database schema specifically for development environment.

CONSTRAINTS:
* Development environment must not alter production data
* Environment variables must be used for configuration
* Services must start automatically in each environment
* Secrets must not be stored in version control
* Development database must be isolated from production
* Code changes must be reflected without service restarts
* Development scripts must be platform-agnostic
* Replit must function without Docker

EXAMPLES:
```yaml
# docker-compose.combined.yml example
version: '3.8'
services:
  sectorwars-app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "5000:5000"  # Game API Server
      - "3000:3000"  # Player Client
      - "3001:3001"  # Admin UI
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - NODE_ENV=${NODE_ENV:-development}
```

```javascript
// PM2 configuration example for Replit
module.exports = {
  apps: [
    {
      name: 'game-api-server',
      cwd: './services/gameserver',
      script: 'python3',
      args: '-m uvicorn src.main:app --host 0.0.0.0 --port 5000 --reload',
      env: {
        PYTHONUNBUFFERED: 1,
        DATABASE_URL: process.env.DATABASE_URL
      },
      watch: true,
      autorestart: true
    },
    {
      name: 'player-client',
      cwd: './services/player-client',
      script: 'npm',
      args: 'run dev -- --host 0.0.0.0 --port 3000',
      env: {
        API_URL: 'http://localhost:5000'
      },
      autorestart: true
    },
    {
      name: 'admin-ui',
      cwd: './services/admin-ui',
      script: 'npm',
      args: 'run dev -- --host 0.0.0.0 --port 3001',
      env: {
        API_URL: 'http://localhost:5000'
      },
      autorestart: true
    }
  ]
};
```

```bash
# Environment detection script example
detect_environment() {
  if [ -n "$REPL_ID" ] || [ -n "$REPL_SLUG" ] || [ -d "/home/runner" ]; then
    echo "replit"
  elif [ -n "$CODESPACE_NAME" ] || [ -n "$GITHUB_CODESPACES_PORT_FORWARDING_DOMAIN" ]; then
    echo "codespaces"
  else
    echo "local"
  fi
}

ENV=$(detect_environment)
case "$ENV" in
  "replit")
    echo "Running in Replit environment"
    if command -v docker &> /dev/null; then
      docker-compose -f docker-compose.yml -f docker-compose.replit.yml up
    else
      ./dev-scripts/start-replit.sh
    fi
    ;;
  "codespaces"|"local")
    echo "Running in $ENV environment"
    docker-compose up
    ;;
esac
```