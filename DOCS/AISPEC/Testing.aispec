OVERVIEW:
Testing infrastructure combines pytest for unit/integration testing and Cypress for E2E testing with fixtures for test data, containerized test environments, and CI/CD pipeline integration.

FACTS:
* Pytest provides unit and integration testing capabilities
* Cypress enables end-to-end testing of web interfaces
* Docker containers isolate test environments
* Test database is separate from development/production
* Fixtures generate consistent test data
* CI/CD pipeline runs tests automatically on code changes
* Test coverage reporting integrated into workflow
* API tests use requests library with pytest
* Property-based testing with Hypothesis for edge cases
* Parallel test execution for faster feedback

TERMINOLOGY:
* Unit Test: Tests isolated components without external dependencies
* Integration Test: Tests interactions between components
* E2E Test: End-to-end tests simulating real user interactions
* Fixture: Reusable test data/environment setup
* Mocking: Replacing real components with test doubles
* Test Coverage: Percentage of code executed by tests
* Hypothesis: Library for property-based testing

FILES:
- /services/gameserver/
  ├── tests/
  │   ├── unit/           # Unit tests directory
  │   ├── integration/    # Integration tests directory  
  │   ├── conftest.py     # Pytest configuration and fixtures
  │   └── test_data/      # Test data files
  └── pytest.ini         # Pytest configuration
- /services/player-client/
  ├── cypress/
  │   ├── e2e/           # End-to-end tests
  │   ├── fixtures/      # Test fixtures
  │   └── support/       # Test support files
  └── cypress.config.js  # Cypress configuration
- /services/admin-ui/
  ├── cypress/
  │   ├── e2e/           # End-to-end tests
  │   └── fixtures/      # Test fixtures
  └── cypress.config.js  # Cypress configuration

SCHEMA:
No database schema specifically for testing. Tests use separate database with same schema as production.

CONSTRAINTS:
* Tests must not modify production or development data
* Unit tests must not depend on external services
* Test coverage must exceed 80% for core game logic
* E2E tests must run in CI pipeline
* Test data must be isolated and cleaned up after tests
* Tests must be runnable by AI agents for automation
* Production code must not contain test-specific code

EXAMPLES:
```python
# Unit test example with pytest
import pytest
from src.models.user import User

def test_user_creation():
    user = User(username="testuser", email="test@example.com")
    user.set_password("password123")
    
    assert user.username == "testuser"
    assert user.email == "test@example.com"
    assert user.check_password("password123") == True
    assert user.check_password("wrongpassword") == False

# API test example
import requests

def test_login_api(test_server):
    response = requests.post(
        f"{test_server}/api/login", 
        json={"username": "testuser", "password": "password123"}
    )
    assert response.status_code == 200
    assert "token" in response.json()
```

```javascript
// Cypress E2E test example
describe('User Login', () => {
  beforeEach(() => {
    cy.request('POST', '/api/test/reset')
    cy.request('POST', '/api/test/setup', {
      user: {
        username: 'testuser',
        password: 'password123'
      }
    })
  })

  it('should login successfully with correct credentials', () => {
    cy.visit('/login')
    cy.get('input[name="username"]').type('testuser')
    cy.get('input[name="password"]').type('password123')
    cy.get('form').submit()
    cy.url().should('include', '/dashboard')
    cy.get('.user-info').should('contain', 'testuser')
  })
})
```