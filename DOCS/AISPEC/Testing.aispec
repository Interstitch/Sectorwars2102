OVERVIEW:
Testing infrastructure combines pytest for unit/integration testing and Playwright for E2E testing with fixtures for test data, containerized test environments, and CI/CD pipeline integration. E2E tests are designed to run in various environments (local, Codespaces, Replit) with automatic environment detection and report generation.

FACTS:
* Pytest provides unit and integration testing capabilities
* Playwright enables end-to-end testing of web interfaces with Chromium browser support
* Docker containers isolate test environments
* Test database is separate from development/production
* Fixtures generate consistent test data
* CI/CD pipeline runs tests automatically on code changes
* Test coverage reporting integrated into workflow
* API tests use requests library with pytest
* Property-based testing with Hypothesis for edge cases
* Custom test runner scripts provide improved developer experience
* Environment detection for test report URLs in different hosting environments

TERMINOLOGY:
* Unit Test: Tests isolated components without external dependencies
* Integration Test: Tests interactions between components
* E2E Test: End-to-end tests simulating real user interactions
* Fixture: Reusable test data/environment setup
* Mocking: Replacing real components with test doubles
* Test Coverage: Percentage of code executed by tests
* Hypothesis: Library for property-based testing
* Page Object Model: Design pattern for UI testing that represents each page as a class

FILES:
- /services/gameserver/
  ├── tests/
  │   ├── unit/           # Unit tests directory
  │   ├── integration/    # Integration tests directory  
  │   ├── conftest.py     # Pytest configuration and fixtures
  │   └── test_data/      # Test data files
  └── pytest.ini         # Pytest configuration
- /services/admin-ui/
  ├── playwright/
  │   ├── e2e/            # End-to-end tests for admin UI
  │   │   ├── admin-login.spec.ts  # Login tests
  │   │   └── admin-ui.spec.ts     # General UI tests
  │   ├── fixtures/       # Test fixtures specific to admin UI
  │   │   └── auth.fixtures.ts     # Authentication fixtures
  │   └── utils/          # Helper utilities for admin UI tests
  │       └── auth.utils.ts        # Authentication utilities
  ├── playwright.config.ts  # Playwright configuration for admin UI
  └── scripts/
      └── run-tests.js     # Custom test runner with environment detection
- /services/player-client/
  ├── playwright/
  │   ├── e2e/            # End-to-end tests for player client
  │   │   └── player-ui.spec.ts    # Player UI tests
  │   ├── fixtures/       # Test fixtures specific to player client
  │   │   └── auth.fixtures.ts     # Authentication fixtures
  │   └── utils/          # Helper utilities for player client tests
  │       └── auth.utils.ts        # Authentication utilities
  ├── playwright.config.ts  # Playwright configuration for player client
  └── scripts/
      └── run-tests.js     # Custom test runner with environment detection

SCHEMA:
No database schema specifically for testing. Tests use separate database with same schema as production.

CONSTRAINTS:
* Tests must not modify production or development data
* Unit tests must not depend on external services
* Test coverage must exceed 80% for core game logic
* E2E tests must run in CI pipeline
* Test data must be isolated and cleaned up after tests
* Tests must be runnable by AI agents for automation
* Production code must not contain test-specific code

EXAMPLES:
```python
# Unit test example with pytest
import pytest
from src.models.user import User

def test_user_creation():
    user = User(username="testuser", email="test@example.com")
    user.set_password("password123")
    
    assert user.username == "testuser"
    assert user.email == "test@example.com"
    assert user.check_password("password123") == True
    assert user.check_password("wrongpassword") == False

# API test example
import requests

def test_login_api(test_server):
    response = requests.post(
        f"{test_server}/api/login", 
        json={"username": "testuser", "password": "password123"}
    )
    assert response.status_code == 200
    assert "token" in response.json()
```

```typescript
// Playwright E2E test example
import { test, expect } from '@playwright/test';

test.describe('Admin Authentication', () => {
  test('should display the login page correctly', async ({ page }) => {
    // Navigate to login page
    await page.goto('/login');
    
    // Verify the login page elements are visible
    await expect(page.locator('.login-form')).toBeVisible();
    await expect(page.locator('h2')).toContainText('Admin Login');
    
    // Verify form fields are present
    await expect(page.locator('#username')).toBeVisible();
    await expect(page.locator('#password')).toBeVisible();
    await expect(page.locator('.login-button')).toBeVisible();
  });
});
```

```typescript
// Test fixtures example
import { test as base } from '@playwright/test';

export type AdminCredentials = {
  username: string;
  password: string;
};

export const test = base.extend<{
  adminCredentials: AdminCredentials;
}>({
  // Default admin credentials for testing
  adminCredentials: {
    username: 'admin',
    password: 'password123',
  },
});

export { expect } from '@playwright/test';
```