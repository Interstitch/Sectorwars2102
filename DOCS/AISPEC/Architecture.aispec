OVERVIEW:
Sector Wars 2102 uses a microservices architecture with three separate containerized services: Game API Server, Player Client, and Admin UI, all connecting to a remote PostgreSQL database.

FACTS:
* System runs via Docker in all environments (local, Codespaces, Replit)
* Remote Neon PostgreSQL database for persistence across environments
* Microservices communicate via RESTful API calls
* Game logic resides exclusively in the Game API server
* All services containerized for consistent environment behavior
* Docker Compose orchestrates service startup in each environment
* Environment detection determines appropriate runtime configuration
* Replit compatibility maintained via specialized Dockerfile

TERMINOLOGY:
* Game API Server: Core backend service containing all game logic and database operations
* Player Client: Lightweight web interface for playing the game
* Admin UI: Specialized interface for game universe administration
* Environment Detection: System to identify whether code is running in local, Codespaces, or Replit environment

FILES:
- /
  ├── docker-compose.yml        # Main service orchestration
  ├── docker-compose.replit.yml # Replit-specific overrides
  ├── CLAUDE.md                 # AI assistant configuration
  ├── services/
  │   ├── gameserver/          # Game API Server component
  │   │   ├── Dockerfile
  │   │   ├── requirements.txt
  │   │   └── src/             # Game server source code
  │   ├── player-client/       # Player web interface
  │   │   ├── Dockerfile
  │   │   ├── package.json
  │   │   └── src/             # Player client source code
  │   └── admin-ui/            # Admin interface 
  │       ├── Dockerfile
  │       ├── package.json
  │       └── src/             # Admin UI source code
  └── DOCS/
      ├── FEATURE_DOCS/       # Feature documentation
      └── AISPEC/             # AI assistant documentation

SCHEMA:
No database schema directly associated with architecture. See Database.aispec for schema details.

CONSTRAINTS:
* Game logic must remain exclusively in the Game API Server
* Frontend services must not contain business logic
* All persistent data must be stored in PostgreSQL database
* Environment variables must be used for configuration
* Services must function in all three environments without code changes
* Docker must be used for containerization in all environments

EXAMPLES:
```
# Example docker-compose.yml structure
version: '3.8'
services:
  gameserver:
    build: ./services/gameserver
    ports:
      - "5000:5000"
    environment:
      - DATABASE_URL=${DATABASE_URL}
  
  player-client:
    build: ./services/player-client
    ports:
      - "3000:3000"
    environment:
      - API_URL=http://gameserver:5000
  
  admin-ui:
    build: ./services/admin-ui
    ports:
      - "3001:3000"
    environment:
      - API_URL=http://gameserver:5000
```