OVERVIEW:
Sector Wars 2102 uses a flexible architecture with three separate services: Game API Server, Player Client, and Admin UI, all connecting to a remote PostgreSQL database. Services can be deployed either as Docker containers or run directly with PM2 process management.

FACTS:
* Multiple deployment options with the same codebase:
  * Docker multi-container (separate containers per service)
  * Docker single-container (combined container with PM2)
  * Direct process management via PM2 (for Replit)
* Remote Neon PostgreSQL database for persistence across environments
* Microservices communicate via RESTful API calls
* Game logic resides exclusively in the Game API server
* Environment detection determines appropriate runtime configuration
* PM2 provides process management for both Docker and non-Docker deployments
* Python FastAPI backend with Uvicorn server
* React with TypeScript frontend services

TERMINOLOGY:
* Game API Server: Core backend service containing all game logic and database operations
* Player Client: Web interface for playing the game
* Admin UI: Specialized interface for game universe administration
* Environment Detection: System to identify whether code is running in local, Codespaces, or Replit environment
* PM2: Process Manager for Node.js applications (used for managing all services)

FILES:
- /
  ├── docker-compose.yml          # Main service orchestration (multi-container)
  ├── Dockerfile                  # Combined container Dockerfile
  ├── pm2.replit.config.js        # PM2 configuration for Replit environment
  ├── CLAUDE.md                   # AI assistant configuration
  ├── tests/                      # Central testing directory
  │   ├── e2e_tests/              # Centralized E2E tests
  │   │   ├── admin/              # Admin UI tests
  │   │   │   └── ui/             # Admin UI test files
  │   │   ├── player/             # Player client tests
  │   │   │   └── ui/             # Player client test files
  │   │   ├── fixtures/           # Shared test fixtures
  │   │   ├── utils/              # Shared utility functions
  │   │   ├── playwright.config.ts # Playwright configuration
  │   │   ├── test-explorer.config.ts # VS Code Test Explorer config
  │   │   └── run_all_tests.sh    # Script to run all E2E tests
  │   └── test-results/           # Test reports and artifacts
  ├── dev-scripts/                # Development utility scripts
  │   ├── setup.sh                # Unified setup script
  │   ├── start-unified.sh        # Main entry script
  │   └── start-replit-unified.sh # Replit-specific script
  ├── .env.d/                     # Environment configuration scripts
  │   └── path.sh                 # Path configuration
  ├── services/
  │   ├── gameserver/            # Game API Server component
  │   │   ├── Dockerfile
  │   │   ├── requirements.txt
  │   │   ├── pyproject.toml     # Python project configuration
  │   │   ├── src/
  │   │   │   ├── main.py        # Application entry point
  │   │   │   ├── api/           # API routes and middleware
  │   │   │   ├── auth/          # Authentication system
  │   │   │   ├── models/        # Database models
  │   │   │   ├── schemas/       # API schema definitions
  │   │   │   ├── services/      # Business logic
  │   │   │   ├── core/          # Core infrastructure
  │   │   │   └── utils/         # Utility functions
  │   │   ├── tests/             # Test suite
  │   │   │   ├── api/           # API tests
  │   │   │   │   ├── test_auth_routes.py
  │   │   │   │   └── test_users_routes.py
  │   │   │   ├── conftest.py    # Test fixtures and configuration
  │   │   │   ├── mock_app.py    # Mock application for testing
  │   │   │   ├── mock_config.py # Test configuration
  │   │   │   └── run_tests.sh   # Test runner script
  │   │   └── alembic/           # Database migrations
  │   ├── player-client/         # Player web interface
  │   │   ├── Dockerfile
  │   │   ├── package.json
  │   │   ├── playwright.config.ts # Playwright test configuration
  │   │   ├── run_tests.sh       # Test runner script
  │   │   ├── src/
  │   │   │   ├── main.tsx       # Application entry point
  │   │   │   ├── App.tsx        # Root component
  │   │   │   ├── auth/          # Authentication components
  │   │   │   ├── components/    # Reusable UI components
  │   │   │   ├── pages/         # Page components
  │   │   │   ├── services/      # API client services
  │   │   │   └── types/         # TypeScript type definitions
  │   ├── admin-ui/              # Admin interface
  │   │   ├── Dockerfile
  │   │   ├── package.json
  │   │   ├── src/
  │   │   │   ├── main.tsx       # Application entry point
  │   │   │   ├── App.tsx        # Root component
  │   │   │   ├── auth/          # Admin authentication
  │   │   │   ├── components/    # Reusable UI components
  │   │   │   ├── pages/         # Admin pages
  │   │   │   ├── services/      # API client services
  │   │   │   └── types/         # TypeScript type definitions
  │   │   └── scripts/
  │   │       └── run-tests.js   # Test runner script
  │   ├── playwright-admin/      # Playwright admin tests
  │   │   ├── e2e/               # End-to-end tests for admin
  │   │   ├── fixtures/          # Test fixtures
  │   │   ├── utils/             # Test utilities
  │   │   ├── playwright.config.ts # Playwright configuration
  │   │   └── run_tests.sh       # Test runner script
  │   └── playwright-player/     # Playwright player tests
  │       ├── e2e/               # End-to-end tests for player client
  │       ├── fixtures/          # Test fixtures
  │       ├── utils/             # Test utilities
  │       ├── playwright.config.ts # Playwright configuration
  │       └── run_tests.sh       # Test runner script
  └── DOCS/
      ├── FEATURE_DOCS/         # Feature documentation
      │   ├── TESTING.md        # Comprehensive testing guide
      │   └── E2E_TESTING.md    # End-to-End testing guide (deprecated)
      ├── DATA_DEFS/            # Data Definitions and Models
      └── AISPEC/               # AI assistant documentation
          ├── Architecture.aispec   # Overall architecture
          ├── Database.aispec       # Database schema
          ├── GameServer.aispec     # Game server details
          └── AuthSystem.aispec     # Authentication system

SCHEMA:
No database schema directly associated with architecture. See Database.aispec for schema details.

CONSTRAINTS:
* Game logic must remain exclusively in the Game API Server
* Frontend services must not contain business logic
* All persistent data must be stored in external PostgreSQL database, provided by a 3rd party
* Environment variables must be used for configuration
* Services must function in all three environments without code changes
* Replit must run without requiring Docker

EXAMPLES:
```
# Docker multi-container deployment (docker-compose.yml)
services:
  gameserver:
    build: ./services/gameserver
    ports:
      - "8080:8080"
    environment:
      - DATABASE_URL=${DATABASE_URL}

  player-client:
    build: ./services/player-client
    ports:
      - "3000:3000"
    environment:
      - API_URL=http://gameserver:8080

  admin-ui:
    build: ./services/admin-ui
    ports:
      - "3001:3001"
    environment:
      - API_URL=http://gameserver:8080
```


```javascript
// PM2 process management (pm2.replit.config.js)
module.exports = {
  apps: [
    {
      name: 'game-api-server',
      cwd: './services/gameserver',
      script: 'python3',
      args: '-m uvicorn src.main:app --host 0.0.0.0 --port 8080 --reload',
      env: {
        PYTHONUNBUFFERED: 1,
        DATABASE_URL: process.env.DATABASE_URL
      },
      autorestart: true
    },
    {
      name: 'player-client',
      cwd: './services/player-client',
      script: 'npm',
      args: 'run dev -- --host 0.0.0.0 --port 3000',
      env: {
        API_URL: 'http://localhost:8080'
      },
      autorestart: true
    },
    {
      name: 'admin-ui',
      cwd: './services/admin-ui',
      script: 'npm',
      args: 'run dev -- --host 0.0.0.0 --port 3001',
      env: {
        API_URL: 'http://localhost:8080'
      },
      autorestart: true
    }
  ]
};
```